   1              	# 1 "board/Cstartup.S"
   1              	/*------------------------------------------------------------------------------
   0              	
   2              	//*-         ATMEL Microcontroller Software Support  -  ROUSSET  -
   3              	//*------------------------------------------------------------------------------
   4              	//* The software is delivered "AS IS" without warranty or condition of any
   5              	//* kind, either express, implied or statutory. This includes without
   6              	//* limitation any warranty or condition with respect to merchantability or
   7              	//* fitness for any particular purpose, or against the infringements of
   8              	//* intellectual property rights of others.
   9              	//*-----------------------------------------------------------------------------
  10              	//*- File source          : Cstartup.s
  11              	//*- Object               : Generic CStartup for KEIL and GCC No Use REMAP
  12              	//*- Compilation flag     : None
  13              	//*-
  14              	//*- 1.0 10/Mar/05 JPP    : Creation
  15              	//*- 1.1 01/Apr/05 JPP    : save SPSR 
  16              	//*-----------------------------------------------------------------------------*/
  17              	
  18              	     .equ   IRQ_Stack_Size,     0x00000060
  19              	
  20              	/* #include "AT91SAM7S256_inc.h"	  */
  21              	
  22              		.equ AIC_IVR,         (256) 
  23              		.equ AIC_FVR,         (260) 
  24              		.equ AIC_EOICR,       (304)
  25              		.equ AT91C_BASE_AIC,  (0xFFFFF000)
  26              	
  27              	#;------------------------------------------------------------------------------
  28              	#;- Section Definition
  29              	#;-----------------
  30              	#;-  Section    
  31              	#;- .internal_ram_top 	Top_Stack: used by the cstartup for vector initalisation 
  32              	#;-			management defined by ld and affect from ldscript 
  33              	#;------------------------------------------------------------------------------
  34              		.section 	.internal_ram_top
  35              		.code 32
  36              		.align 	0
  37              		.global	Top_Stack
  38              	Top_Stack:
  39              		
  40              	/*------------------------------------------------------------------------------
  41              	*- Area Definition
  42              	*------------------------------------------------------------------------------
  43              	* .text is used instead of .section .text so it works with arm-aout too.  */
  44              	        .section 	.reset
  45              	        .text
  46              	        .global _startup
  47              	        .func   _startup
  48              	_startup:
  49              	reset: 
  50              	/*------------------------------------------------------------------------------
  51              	//*- Exception vectors 
  52              	//*--------------------
  53              	//*- These vectors can be read at address 0 or at RAM address
  54              	//*- They ABSOLUTELY requires to be in relative addresssing mode in order to
  55              	//*- guarantee a valid jump. For the moment, all are just looping.
  56              	//*- If an exception occurs before remap, this would result in an infinite loop.
  57              	//*- To ensure if a exeption occurs before start application to infinite loop.
  58              	//*------------------------------------------------------------------------------*/
  59              	
  60 0000 100000EA 	                B           InitReset           /* 0x00 Reset handler */
  61              	undefvec:
  62 0004 FEFFFFEA 	                B           undefvec            /* 0x04 Undefined Instruction */
  63              	swivec:
  64 0008 FEFFFFEA 	                B           swivec              /* 0x08 Software Interrupt */
  65              	pabtvec:
  66 000c FEFFFFEA 	                B           pabtvec             /* 0x0C Prefetch Abort */
  67              	dabtvec:
  68 0010 FEFFFFEA 	                B           dabtvec             /* 0x10 Data Abort */
  69              	rsvdvec:
  70 0014 FEFFFFEA 	                B           rsvdvec             /* 0x14 reserved  */
  71              	irqvec:
  72 0018 FEFFFFEA 	                B           IRQ_Handler_Entry   /* 0x18 IRQ	 */
  73              	fiqvec:               			            	/* 0x1c FIQ	*/
  74              	/*------------------------------------------------------------------------------
  75              	//*- Function             : FIQ_Handler_Entry
  76              	//*- Treatments           : FIQ Controller Interrupt Handler.
  77              	//*- Called Functions     : AIC_FVR[interrupt] 
  78              	//*------------------------------------------------------------------------------*/
  79              	
  80              	FIQ_Handler_Entry:
  81              	
  82              	/*- Switch in SVC/User Mode to allow User Stack access for C code 	*/
  83              	/* because the FIQ is not yet acknowledged*/
  84              	
  85              	/*- Save and r0 in FIQ_Register */
  86 001c 0090A0E1 	            mov         r9,r0
  87 0020 040198E5 		        ldr         r0 , [r8, #AIC_FVR]
  88 0024 D3F021E3 	            msr         CPSR_c,#I_BIT | F_BIT | ARM_MODE_SVC
  89              	
  90              	/*- Save scratch/used registers and LR in User Stack */
  91 0028 0E502DE9 	            stmfd       sp!, { r1-r3, r12, lr}
  92              	
  93              	/*- Branch to the routine pointed by the AIC_FVR */
  94 002c 0FE0A0E1 	            mov         r14, pc
  95 0030 10FF2FE1 	            bx          r0
  96              	
  97              	/*- Restore scratch/used registers and LR from User Stack */
  98 0034 0E50BDE8 	            ldmia       sp!, { r1-r3, r12, lr}
  99              	
 100              	/*- Leave Interrupts disabled and switch back in FIQ mode */
 101 0038 D1F021E3 	            msr         CPSR_c, #I_BIT | F_BIT | ARM_MODE_FIQ
 102              	
 103              	/*- Restore the R0 ARM_MODE_SVC register */
 104 003c 0900A0E1 	            mov         r0,r9
 105              	
 106              	/*- Restore the Program Counter using the LR_fiq directly in the PC */
 107 0040 04F05EE2 	            subs        pc,lr,#4
 108              		.align 0
 109              	.RAM_TOP:
 110 0044 00000000 		.word	Top_Stack
 111              	
 112              	InitReset:
 113              	/*------------------------------------------------------------------------------
 114              	/*- Low level Init (PMC, AIC, ? ....) by C function AT91F_LowLevelInit
 115              	/*------------------------------------------------------------------------------*/
 116              	            	.extern   AT91F_LowLevelInit
 117              	/*- minumum C initialization */
 118              	/*- call  AT91F_LowLevelInit( void) */
 119              	
 120 0048 0CD01FE5 	            ldr     r13,.RAM_TOP            /* temporary stack in internal RAM */
 121              	/*--Call Low level init function in ABSOLUTE through the Interworking	*/
 122              		       // ldr	    r0,=AT91F_LowLevelInit
 123 004c 190000EB 			   bl pool_helper
 124 0050 0FE0A0E1 	            mov     lr, pc
 125 0054 10FF2FE1 		        bx	    r0
 126              	/*------------------------------------------------------------------------------
 127              	//*- Stack Sizes Definition
 128              	//*------------------------
 129              	//*- Interrupt Stack requires 2 words x 8 priority level x 4 bytes when using
 130              	//*- the vectoring. This assume that the IRQ management.
 131              	//*- The Interrupt Stack must be adjusted depending on the interrupt handlers.
 132              	//*- Fast Interrupt not requires stack If in your application it required you must
 133              	//*- be definehere.
 134              	//*- The System stack size is not defined and is limited by the free internal
 135              	//*- SRAM.
 136              	//*------------------------------------------------------------------------------*/
 137              	
 138              	/*------------------------------------------------------------------------------
 139              	//*- Top of Stack Definition
 140              	//*-------------------------
 141              	//*- Interrupt and Supervisor Stack are located at the top of internal memory in 
 142              	//*- order to speed the exception handling context saving and restoring.
 143              	//*- ARM_MODE_SVC (Application, C) Stack is located at the top of the external memory.
 144              	//*------------------------------------------------------------------------------*/
 145              	
 146              		  .EQU		IRQ_STACK_SIZE,    (3*8*4)
 147              	          .EQU		ARM_MODE_FIQ,       0x11
 148              	          .EQU		ARM_MODE_IRQ,       0x12
 149              	          .EQU		ARM_MODE_SVC,       0x13
 150              	
 151              	          .EQU		I_BIT,              0x80
 152              	          .EQU		F_BIT,              0x40
 153              	
 154              	/*------------------------------------------------------------------------------
 155              	//*- Setup the stack for each mode
 156              	//*-------------------------------*/
 157 0058 0D00A0E1 	                mov     r0,r13
 158              	
 159              	/*- Set up Fast Interrupt Mode and set FIQ Mode Stack*/
 160 005c D1F021E3 	                msr     CPSR_c, #ARM_MODE_FIQ | I_BIT | F_BIT
 161              	/*- Init the FIQ register*/
 162              	            	//ldr     r8, =AT91C_BASE_AIC
 163 0060 160000EB 					bl pool_helper2
 164              	
 165              	/*- Set up Interrupt Mode and set IRQ Mode Stack*/
 166 0064 D2F021E3 	                msr     CPSR_c, #ARM_MODE_IRQ | I_BIT | F_BIT
 167 0068 00D0A0E1 	                mov     r13, r0                     /* Init stack IRQ */
 168 006c 600040E2 	                sub     r0, r0, #IRQ_Stack_Size
 169              	/*- Set up Supervisor Mode and set Supervisor Mode Stack*/
 170 0070 13F021E3 	                msr     CPSR_c, #ARM_MODE_SVC
 171 0074 00D0A0E1 	                mov     r13, r0                     /* Init stack Sup */
 172              	
 173              	/*- Enable interrupt & Set up Supervisor Mode and set Supervisor Mode Stack*/
 174              	
 175              	# Relocate .data section (Copy from ROM to RAM)
 176 0078 A8109FE5 	                LDR     R1, =_etext
 177 007c A8209FE5 	                LDR     R2, =_data
 178 0080 A8309FE5 	                LDR     R3, =_edata
 179 0084 030052E1 	LoopRel:        CMP     R2, R3
 180 0088 04009134 	                LDRLO   R0, [R1], #4
 181 008c 04008234 	                STRLO   R0, [R2], #4
 182 0090 FBFFFF3A 	                BLO     LoopRel
 183              	
 184              	# Clear .bss section (Zero init)
 185 0094 0000A0E3 	                MOV     R0, #0
 186 0098 94109FE5 	                LDR     R1, =__bss_start__
 187 009c 94209FE5 	                LDR     R2, =__bss_end__
 188 00a0 020051E1 	LoopZI:         CMP     R1, R2
 189 00a4 04008134 	                STRLO   R0, [R1], #4
 190 00a8 FCFFFF3A 	                BLO     LoopZI
 191              	
 192              			//do stuff here befor main
 193              	
 194 00ac 88E09FE5 			ldr	lr,=exit
 195 00b0 88009FE5 			ldr	r0,=main
 196 00b4 10FF2FE1 			bx	r0
 197              	
 199              	        .endfunc
 200              			
 201              			
 202              	pool_helper:
 203 00b8 84009FE5 		ldr r0, =AT91F_LowLevelInit
 204 00bc 1EFF2FE1 		bx lr
 205              		
 206              	pool_helper2:
 207 00c0 80809FE5 		ldr r8, =AT91C_BASE_AIC
 208 00c4 1EFF2FE1 		bx lr
 209              		
 210              	/* "exit" dummy added by mthomas to avoid sbrk write read etc. needed
 211              	   by the newlib default "exit" */
 212              	        .global exit
 213              	        .func   exit
 214              	exit:
 215 00c8 FEFFFFEA 	        b    .
 217              	        .endfunc
 218              	
 219              	
 220              	
 221              	/*------------------------------------------------------------------------------
 222              	//*- Manage exception
 223              	//*---------------
 224              	//*- This module The exception must be ensure in ARM mode
 225              	//*------------------------------------------------------------------------------
 226              	//*------------------------------------------------------------------------------
 227              	//*- Function             : IRQ_Handler_Entry
 228              	//*- Treatments           : IRQ Controller Interrupt Handler.
 229              	//*- Called Functions     : AIC_IVR[interrupt] 
 230              	//*------------------------------------------------------------------------------*/
 231              	        .global IRQ_Handler_Entry
 232              	        .func   IRQ_Handler_Entry
 233              	
 234              	IRQ_Handler_Entry:
 235              	
 236              	/*- Manage Exception Entry  */
 237              	/*- Adjust and save LR_irq in IRQ stack  */
 238 00cc 04E04EE2 	            sub         lr, lr, #4
 239 00d0 00402DE9 	            stmfd       sp!, {lr}
 240              	
 241              	/*- Save SPSR need to be saved for nested interrupt */
 242 00d4 00E04FE1 	            mrs         r14, SPSR
 243 00d8 00402DE9 	            stmfd       sp!, {r14}
 244              	
 245              	/*- Save and r0 in IRQ stack  */
 246 00dc 01002DE9 	            stmfd       sp!, {r0}
 247              	
 248              	/*- Write in the IVR to support Protect Mode  */
 249              	/*- No effect in Normal Mode  */
 250              	/*- De-assert the NIRQ and clear the source in Protect Mode */
 251 00e0 60E09FE5 	            ldr         r14, =AT91C_BASE_AIC
 252 00e4 00019EE5 		    ldr         r0 , [r14, #AIC_IVR]
 253 00e8 00E18EE5 		    str         r14, [r14, #AIC_IVR]
 254              	
 255              	/*- Enable Interrupt and Switch in Supervisor Mode */
 256 00ec 13F021E3 	            msr         CPSR_c, #ARM_MODE_SVC
 257              	
 258              	/*- Save scratch/used registers and LR in User Stack */
 259 00f0 0E502DE9 	            stmfd       sp!, { r1-r3, r12, r14}
 260              	
 261              	/*- Branch to the routine pointed by the AIC_IVR  */
 262 00f4 0FE0A0E1 	            mov         r14, pc
 263 00f8 10FF2FE1 	            bx          r0
 264              	/*- Restore scratch/used registers and LR from User Stack*/
 265 00fc 0E50BDE8 	            ldmia       sp!, { r1-r3, r12, r14}
 266              	
 267              	/*- Disable Interrupt and switch back in IRQ mode */
 268 0100 92F021E3 	            msr         CPSR_c, #I_BIT | ARM_MODE_IRQ
 269              	
 270              	/*- Mark the End of Interrupt on the AIC */
 271 0104 3CE09FE5 	            ldr         r14, =AT91C_BASE_AIC
 272 0108 30E18EE5 	            str         r14, [r14, #AIC_EOICR]
 273              	
 274              	/*- Restore SPSR_irq and r0 from IRQ stack */
 275 010c 0100BDE8 	            ldmia       sp!, {r0}
 276              	
 277              	/*- Restore SPSR_irq and r0 from IRQ stack */
 278 0110 0040BDE8 	            ldmia       sp!, {r14}
 279 0114 0EF06FE1 	            msr         SPSR_cxsf, r14
 280              	
 281              	/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
 282 0118 0080FDE8 	            ldmia       sp!, {pc}^
 283              		
 285              	        .endfunc
 286              	/*---------------------------------------------------------------
 287              	//* ?EXEPTION_VECTOR
 288              	//* This module is only linked if needed for closing files.
 289              	//*---------------------------------------------------------------*/
 290              	        .global AT91F_Default_FIQ_handler
 291              	        .func   AT91F_Default_FIQ_handler
 292              	AT91F_Default_FIQ_handler:
 293 011c FEFFFFEA 	            b     AT91F_Default_FIQ_handler
 295              	        .endfunc
 296              	
 297              	        .global AT91F_Default_IRQ_handler
 298              	        .func   AT91F_Default_IRQ_handler
 299              	AT91F_Default_IRQ_handler:
 300 0120 FEFFFFEA 	            b     AT91F_Default_IRQ_handler
 302              	        .endfunc
 303              	
 304              	        .global AT91F_Spurious_handler
 305              	        .func   AT91F_Spurious_handler
 306              	AT91F_Spurious_handler:
 307 0124 FEFFFFEA 	            b     AT91F_Spurious_handler
 309              	        .endfunc
 310              	
 311              	timer1_asm_irq_handler:
 312              			
 313              	
 314 0128 00000000 	.end
 314      00000000 
 314      00000000 
 314      00000000 
 314      00000000 
DEFINED SYMBOLS
    board/Cstartup.S:18     *ABS*:0000000000000060 IRQ_Stack_Size
    board/Cstartup.S:22     *ABS*:0000000000000100 AIC_IVR
    board/Cstartup.S:23     *ABS*:0000000000000104 AIC_FVR
    board/Cstartup.S:24     *ABS*:0000000000000130 AIC_EOICR
    board/Cstartup.S:25     *ABS*:00000000fffff000 AT91C_BASE_AIC
    board/Cstartup.S:38     .internal_ram_top:0000000000000000 Top_Stack
    board/Cstartup.S:48     .text:0000000000000000 _startup
    board/Cstartup.S:49     .text:0000000000000000 reset
    board/Cstartup.S:112    .text:0000000000000048 InitReset
    board/Cstartup.S:60     .text:0000000000000000 $a
    board/Cstartup.S:61     .text:0000000000000004 undefvec
    board/Cstartup.S:63     .text:0000000000000008 swivec
    board/Cstartup.S:65     .text:000000000000000c pabtvec
    board/Cstartup.S:67     .text:0000000000000010 dabtvec
    board/Cstartup.S:69     .text:0000000000000014 rsvdvec
    board/Cstartup.S:71     .text:0000000000000018 irqvec
    board/Cstartup.S:234    .text:00000000000000cc IRQ_Handler_Entry
    board/Cstartup.S:73     .text:000000000000001c fiqvec
    board/Cstartup.S:80     .text:000000000000001c FIQ_Handler_Entry
                            *ABS*:0000000000000080 I_BIT
                            *ABS*:0000000000000040 F_BIT
                            *ABS*:0000000000000013 ARM_MODE_SVC
                            *ABS*:0000000000000011 ARM_MODE_FIQ
    board/Cstartup.S:109    .text:0000000000000044 .RAM_TOP
    board/Cstartup.S:110    .text:0000000000000044 $d
    board/Cstartup.S:120    .text:0000000000000048 $a
    board/Cstartup.S:202    .text:00000000000000b8 pool_helper
    board/Cstartup.S:146    *ABS*:0000000000000060 IRQ_STACK_SIZE
    board/Cstartup.S:148    *ABS*:0000000000000012 ARM_MODE_IRQ
    board/Cstartup.S:206    .text:00000000000000c0 pool_helper2
    board/Cstartup.S:179    .text:0000000000000084 LoopRel
    board/Cstartup.S:188    .text:00000000000000a0 LoopZI
    board/Cstartup.S:214    .text:00000000000000c8 exit
    board/Cstartup.S:292    .text:000000000000011c AT91F_Default_FIQ_handler
    board/Cstartup.S:299    .text:0000000000000120 AT91F_Default_IRQ_handler
    board/Cstartup.S:306    .text:0000000000000124 AT91F_Spurious_handler
    board/Cstartup.S:311    .text:0000000000000128 timer1_asm_irq_handler
    board/Cstartup.S:314    .text:0000000000000128 $d

UNDEFINED SYMBOLS
_etext
_data
_edata
__bss_start__
__bss_end__
main
AT91F_LowLevelInit
