   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"pmc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	PMC_DisableProcessorClock
  19              	PMC_DisableProcessorClock:
  20              	.LFB283:
  21              		.file 1 "board/peripherals/pmc/pmc.c"
   1:board/peripherals/pmc/pmc.c **** /* ----------------------------------------------------------------------------
   2:board/peripherals/pmc/pmc.c ****  *         ATMEL Microcontroller Software Support 
   3:board/peripherals/pmc/pmc.c ****  * ----------------------------------------------------------------------------
   4:board/peripherals/pmc/pmc.c ****  * Copyright (c) 2008, Atmel Corporation
   5:board/peripherals/pmc/pmc.c ****  *
   6:board/peripherals/pmc/pmc.c ****  * All rights reserved.
   7:board/peripherals/pmc/pmc.c ****  *
   8:board/peripherals/pmc/pmc.c ****  * Redistribution and use in source and binary forms, with or without
   9:board/peripherals/pmc/pmc.c ****  * modification, are permitted provided that the following conditions are met:
  10:board/peripherals/pmc/pmc.c ****  *
  11:board/peripherals/pmc/pmc.c ****  * - Redistributions of source code must retain the above copyright notice,
  12:board/peripherals/pmc/pmc.c ****  * this list of conditions and the disclaimer below.
  13:board/peripherals/pmc/pmc.c ****  *
  14:board/peripherals/pmc/pmc.c ****  * Atmel's name may not be used to endorse or promote products derived from
  15:board/peripherals/pmc/pmc.c ****  * this software without specific prior written permission.
  16:board/peripherals/pmc/pmc.c ****  *
  17:board/peripherals/pmc/pmc.c ****  * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
  18:board/peripherals/pmc/pmc.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  19:board/peripherals/pmc/pmc.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  20:board/peripherals/pmc/pmc.c ****  * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:board/peripherals/pmc/pmc.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  22:board/peripherals/pmc/pmc.c ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  23:board/peripherals/pmc/pmc.c ****  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  24:board/peripherals/pmc/pmc.c ****  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  25:board/peripherals/pmc/pmc.c ****  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  26:board/peripherals/pmc/pmc.c ****  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:board/peripherals/pmc/pmc.c ****  * ----------------------------------------------------------------------------
  28:board/peripherals/pmc/pmc.c ****  */
  29:board/peripherals/pmc/pmc.c **** 
  30:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  31:board/peripherals/pmc/pmc.c **** //         Headers
  32:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  33:board/peripherals/pmc/pmc.c **** 
  34:board/peripherals/pmc/pmc.c **** #include "pmc.h"
  35:board/peripherals/pmc/pmc.c **** #include <board.h>
  36:board/peripherals/pmc/pmc.c **** 
  37:board/peripherals/pmc/pmc.c **** #ifdef CP15_PRESENT
  38:board/peripherals/pmc/pmc.c **** #include <cp15/cp15.h>
  39:board/peripherals/pmc/pmc.c **** #endif
  40:board/peripherals/pmc/pmc.c **** 
  41:board/peripherals/pmc/pmc.c **** #define MASK_STATUS 0x3FFFFFFC
  42:board/peripherals/pmc/pmc.c **** 
  43:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  44:board/peripherals/pmc/pmc.c **** //         Global functions
  45:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  46:board/peripherals/pmc/pmc.c **** 
  47:board/peripherals/pmc/pmc.c **** #if defined(at91sam7l64) || defined(at91sam7l128)
  48:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  49:board/peripherals/pmc/pmc.c **** /// Sets the fast wake-up inputs that can get the device out of Wait mode.
  50:board/peripherals/pmc/pmc.c **** /// \param inputs  Fast wake-up inputs to enable.
  51:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  52:board/peripherals/pmc/pmc.c **** void PMC_SetFastWakeUpInputs(unsigned int inputs)
  53:board/peripherals/pmc/pmc.c **** {
  54:board/peripherals/pmc/pmc.c ****     //SANITY_CHECK((inputs & ~0xFF) == 0);
  55:board/peripherals/pmc/pmc.c ****     AT91C_BASE_PMC->PMC_FSMR = inputs;
  56:board/peripherals/pmc/pmc.c **** }
  57:board/peripherals/pmc/pmc.c **** 
  58:board/peripherals/pmc/pmc.c **** #if !defined(__ICCARM__)
  59:board/peripherals/pmc/pmc.c **** __attribute__ ((section (".ramfunc"))) // GCC
  60:board/peripherals/pmc/pmc.c **** #endif
  61:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  62:board/peripherals/pmc/pmc.c **** /// Disables the main oscillator, making the device enter Wait mode.
  63:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  64:board/peripherals/pmc/pmc.c **** void PMC_DisableMainOscillatorForWaitMode(void)
  65:board/peripherals/pmc/pmc.c **** {
  66:board/peripherals/pmc/pmc.c ****     AT91C_BASE_PMC->PMC_MOR = 0x37 << 16;
  67:board/peripherals/pmc/pmc.c ****     while ((AT91C_BASE_PMC->PMC_MOR & AT91C_PMC_MAINSELS) != AT91C_PMC_MAINSELS);
  68:board/peripherals/pmc/pmc.c **** }
  69:board/peripherals/pmc/pmc.c **** 
  70:board/peripherals/pmc/pmc.c **** #endif
  71:board/peripherals/pmc/pmc.c **** 
  72:board/peripherals/pmc/pmc.c **** #if defined(at91sam7l)
  73:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  74:board/peripherals/pmc/pmc.c **** /// Disables the main oscillator when NOT running on it.
  75:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  76:board/peripherals/pmc/pmc.c **** void PMC_DisableMainOscillator(void)
  77:board/peripherals/pmc/pmc.c **** {
  78:board/peripherals/pmc/pmc.c ****     AT91C_BASE_PMC->PMC_MOR = 0x37 << 16;
  79:board/peripherals/pmc/pmc.c ****     while ((AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MAINSELS) == AT91C_PMC_MAINSELS);
  80:board/peripherals/pmc/pmc.c **** }
  81:board/peripherals/pmc/pmc.c **** #endif
  82:board/peripherals/pmc/pmc.c **** 
  83:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  84:board/peripherals/pmc/pmc.c **** /// Disables the processor clock
  85:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  86:board/peripherals/pmc/pmc.c **** void PMC_DisableProcessorClock(void)
  87:board/peripherals/pmc/pmc.c **** {    
  22              		.loc 1 87 0
  23              		.cfi_startproc
  24              		@ Function supports interworking.
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27              		@ link register save eliminated.
  88:board/peripherals/pmc/pmc.c ****     AT91C_BASE_PMC->PMC_SCDR = AT91C_PMC_PCK;   
  28              		.loc 1 88 0
  29 0000 0020E0E3 		mvn	r2, #0
  30 0004 0130A0E3 		mov	r3, #1
  31 0008 FB3302E5 		str	r3, [r2, #-1019]
  32              	.L2:
  89:board/peripherals/pmc/pmc.c ****     while ((AT91C_BASE_PMC->PMC_SCSR & AT91C_PMC_PCK) != AT91C_PMC_PCK); 
  33              		.loc 1 89 0 discriminator 1
  34 000c F73312E5 		ldr	r3, [r2, #-1015]
  35 0010 010013E3 		tst	r3, #1
  36 0014 FCFFFF0A 		beq	.L2
  90:board/peripherals/pmc/pmc.c **** }
  37              		.loc 1 90 0
  38 0018 1EFF2FE1 		bx	lr
  39              		.cfi_endproc
  40              	.LFE283:
  42              		.align	2
  43              		.global	PMC_EnablePeripheral
  45              	PMC_EnablePeripheral:
  46              	.LFB284:
  91:board/peripherals/pmc/pmc.c **** 
  92:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  93:board/peripherals/pmc/pmc.c **** /// Enables the clock of a peripheral. The peripheral ID (AT91C_ID_xxx) is used
  94:board/peripherals/pmc/pmc.c **** /// to identify which peripheral is targetted.
  95:board/peripherals/pmc/pmc.c **** /// Note that the ID must NOT be shifted (i.e. 1 << AT91C_ID_xxx).
  96:board/peripherals/pmc/pmc.c **** /// \param id  Peripheral ID (AT91C_ID_xxx).
  97:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
  98:board/peripherals/pmc/pmc.c **** void PMC_EnablePeripheral(unsigned int id)
  99:board/peripherals/pmc/pmc.c **** {
  47              		.loc 1 99 0
  48              		.cfi_startproc
  49              		@ Function supports interworking.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.LVL0:
 100:board/peripherals/pmc/pmc.c ****     //SANITY_CHECK(id < 32);
 101:board/peripherals/pmc/pmc.c **** 
 102:board/peripherals/pmc/pmc.c ****     if ((AT91C_BASE_PMC->PMC_PCSR & (1 << id)) == (1 << id)) {
  54              		.loc 1 102 0
  55 001c 0130A0E3 		mov	r3, #1
  56 0020 1300A0E1 		mov	r0, r3, asl r0
  57              	.LVL1:
  58 0024 0030E0E3 		mvn	r3, #0
  59 0028 E72313E5 		ldr	r2, [r3, #-999]
  60 002c 022000E0 		and	r2, r0, r2
  61 0030 020050E1 		cmp	r0, r2
 103:board/peripherals/pmc/pmc.c **** 
 104:board/peripherals/pmc/pmc.c ****         /*TRACE_INFO("PMC_EnablePeripheral: clock of peripheral"
 105:board/peripherals/pmc/pmc.c ****                    " %u is already enabled\n\r",
 106:board/peripherals/pmc/pmc.c ****                    id);
 107:board/peripherals/pmc/pmc.c **** 	*/
 108:board/peripherals/pmc/pmc.c ****     }
 109:board/peripherals/pmc/pmc.c ****     else {
 110:board/peripherals/pmc/pmc.c **** 
 111:board/peripherals/pmc/pmc.c ****         AT91C_BASE_PMC->PMC_PCER = 1 << id;
  62              		.loc 1 111 0
  63 0034 EF030315 		strne	r0, [r3, #-1007]
  64 0038 1EFF2FE1 		bx	lr
  65              		.cfi_endproc
  66              	.LFE284:
  68              		.align	2
  69              		.global	PMC_DisablePeripheral
  71              	PMC_DisablePeripheral:
  72              	.LFB285:
 112:board/peripherals/pmc/pmc.c ****     }
 113:board/peripherals/pmc/pmc.c **** }
 114:board/peripherals/pmc/pmc.c **** 
 115:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
 116:board/peripherals/pmc/pmc.c **** /// Disables the clock of a peripheral. The peripheral ID (AT91C_ID_xxx) is used
 117:board/peripherals/pmc/pmc.c **** /// to identify which peripheral is targetted.
 118:board/peripherals/pmc/pmc.c **** /// Note that the ID must NOT be shifted (i.e. 1 << AT91C_ID_xxx).
 119:board/peripherals/pmc/pmc.c **** /// \param id  Peripheral ID (AT91C_ID_xxx).
 120:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
 121:board/peripherals/pmc/pmc.c **** void PMC_DisablePeripheral(unsigned int id)
 122:board/peripherals/pmc/pmc.c **** {
  73              		.loc 1 122 0
  74              		.cfi_startproc
  75              		@ Function supports interworking.
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79              	.LVL2:
 123:board/peripherals/pmc/pmc.c ****     //SANITY_CHECK(id < 32);
 124:board/peripherals/pmc/pmc.c **** 
 125:board/peripherals/pmc/pmc.c ****     if ((AT91C_BASE_PMC->PMC_PCSR & (1 << id)) != (1 << id)) {
  80              		.loc 1 125 0
  81 003c 0130A0E3 		mov	r3, #1
  82 0040 1300A0E1 		mov	r0, r3, asl r0
  83              	.LVL3:
  84 0044 0030E0E3 		mvn	r3, #0
  85 0048 E72313E5 		ldr	r2, [r3, #-999]
  86 004c 022000E0 		and	r2, r0, r2
  87 0050 020050E1 		cmp	r0, r2
 126:board/peripherals/pmc/pmc.c **** 
 127:board/peripherals/pmc/pmc.c ****         /*TRACE_INFO("PMC_DisablePeripheral: clock of peripheral"
 128:board/peripherals/pmc/pmc.c ****                    " %u is not enabled\n\r",
 129:board/peripherals/pmc/pmc.c ****                    id);*/
 130:board/peripherals/pmc/pmc.c ****     }
 131:board/peripherals/pmc/pmc.c ****     else {
 132:board/peripherals/pmc/pmc.c **** 
 133:board/peripherals/pmc/pmc.c ****         AT91C_BASE_PMC->PMC_PCDR = 1 << id;
  88              		.loc 1 133 0
  89 0054 EB030305 		streq	r0, [r3, #-1003]
  90 0058 1EFF2FE1 		bx	lr
  91              		.cfi_endproc
  92              	.LFE285:
  94              		.align	2
  95              		.global	PMC_EnableAllPeripherals
  97              	PMC_EnableAllPeripherals:
  98              	.LFB286:
 134:board/peripherals/pmc/pmc.c ****     }
 135:board/peripherals/pmc/pmc.c **** }
 136:board/peripherals/pmc/pmc.c **** 
 137:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
 138:board/peripherals/pmc/pmc.c **** /// Enable all the periph clock via PMC
 139:board/peripherals/pmc/pmc.c **** /// (Becareful of the last 2 bits, it is not periph clock)
 140:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
 141:board/peripherals/pmc/pmc.c **** void PMC_EnableAllPeripherals(void)
 142:board/peripherals/pmc/pmc.c **** {
  99              		.loc 1 142 0
 100              		.cfi_startproc
 101              		@ Function supports interworking.
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 143:board/peripherals/pmc/pmc.c ****     AT91C_BASE_PMC->PMC_PCER = MASK_STATUS;
 105              		.loc 1 143 0
 106 005c 0020E0E3 		mvn	r2, #0
 107 0060 0F31E0E3 		mvn	r3, #-1073741821
 108 0064 EF3302E5 		str	r3, [r2, #-1007]
 109              	.L13:
 144:board/peripherals/pmc/pmc.c ****     while( (AT91C_BASE_PMC->PMC_PCSR & MASK_STATUS) != MASK_STATUS);
 110              		.loc 1 144 0 discriminator 1
 111 0068 E73312E5 		ldr	r3, [r2, #-999]
 112 006c 0F31C3E3 		bic	r3, r3, #-1073741821
 113 0070 130173E3 		cmn	r3, #-1073741820
 114 0074 FBFFFF1A 		bne	.L13
 145:board/peripherals/pmc/pmc.c ****   // TRACE_INFO("Enable all periph clocks\n\r"); 
 146:board/peripherals/pmc/pmc.c **** }
 115              		.loc 1 146 0
 116 0078 1EFF2FE1 		bx	lr
 117              		.cfi_endproc
 118              	.LFE286:
 120              		.align	2
 121              		.global	PMC_DisableAllPeripherals
 123              	PMC_DisableAllPeripherals:
 124              	.LFB287:
 147:board/peripherals/pmc/pmc.c **** 
 148:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
 149:board/peripherals/pmc/pmc.c **** /// Disable all the periph clock via PMC
 150:board/peripherals/pmc/pmc.c **** /// (Becareful of the last 2 bits, it is not periph clock)
 151:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
 152:board/peripherals/pmc/pmc.c **** void PMC_DisableAllPeripherals(void)
 153:board/peripherals/pmc/pmc.c **** {
 125              		.loc 1 153 0
 126              		.cfi_startproc
 127              		@ Function supports interworking.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 154:board/peripherals/pmc/pmc.c ****     AT91C_BASE_PMC->PMC_PCDR = MASK_STATUS;
 131              		.loc 1 154 0
 132 007c 0020E0E3 		mvn	r2, #0
 133 0080 0F31E0E3 		mvn	r3, #-1073741821
 134 0084 EB3302E5 		str	r3, [r2, #-1003]
 135              	.L16:
 155:board/peripherals/pmc/pmc.c ****     while((AT91C_BASE_PMC->PMC_PCSR & MASK_STATUS) != 0);
 136              		.loc 1 155 0 discriminator 1
 137 0088 E73312E5 		ldr	r3, [r2, #-999]
 138 008c 0F11D3E3 		bics	r1, r3, #-1073741821
 139 0090 FCFFFF1A 		bne	.L16
 156:board/peripherals/pmc/pmc.c ****     //TRACE_INFO("Disable all periph clocks\n\r");
 157:board/peripherals/pmc/pmc.c **** }
 140              		.loc 1 157 0
 141 0094 1EFF2FE1 		bx	lr
 142              		.cfi_endproc
 143              	.LFE287:
 145              		.align	2
 146              		.global	PMC_IsAllPeriphEnabled
 148              	PMC_IsAllPeriphEnabled:
 149              	.LFB288:
 158:board/peripherals/pmc/pmc.c **** 
 159:board/peripherals/pmc/pmc.c **** //-----------------------------------------------------------------------------
 160:board/peripherals/pmc/pmc.c **** /// Get Periph Status
 161:board/peripherals/pmc/pmc.c **** //-----------------------------------------------------------------------------
 162:board/peripherals/pmc/pmc.c **** unsigned int PMC_IsAllPeriphEnabled(void)
 163:board/peripherals/pmc/pmc.c **** {
 150              		.loc 1 163 0
 151              		.cfi_startproc
 152              		@ Function supports interworking.
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 164:board/peripherals/pmc/pmc.c ****     return (AT91C_BASE_PMC->PMC_PCSR == MASK_STATUS);
 156              		.loc 1 164 0
 157 0098 0030E0E3 		mvn	r3, #0
 158 009c E70313E5 		ldr	r0, [r3, #-999]
 165:board/peripherals/pmc/pmc.c **** }
 159              		.loc 1 165 0
 160 00a0 130170E3 		cmn	r0, #-1073741820
 161 00a4 0000A013 		movne	r0, #0
 162 00a8 0100A003 		moveq	r0, #1
 163 00ac 1EFF2FE1 		bx	lr
 164              		.cfi_endproc
 165              	.LFE288:
 167              		.align	2
 168              		.global	PMC_IsPeriphEnabled
 170              	PMC_IsPeriphEnabled:
 171              	.LFB289:
 166:board/peripherals/pmc/pmc.c **** 
 167:board/peripherals/pmc/pmc.c **** //-----------------------------------------------------------------------------
 168:board/peripherals/pmc/pmc.c **** /// Get Periph Status
 169:board/peripherals/pmc/pmc.c **** //-----------------------------------------------------------------------------
 170:board/peripherals/pmc/pmc.c **** unsigned int PMC_IsPeriphEnabled(unsigned int id)
 171:board/peripherals/pmc/pmc.c **** {
 172              		.loc 1 171 0
 173              		.cfi_startproc
 174              		@ Function supports interworking.
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178              	.LVL4:
 172:board/peripherals/pmc/pmc.c ****     return (AT91C_BASE_PMC->PMC_PCSR & (1 << id));  
 179              		.loc 1 172 0
 180 00b0 0030E0E3 		mvn	r3, #0
 181 00b4 E73313E5 		ldr	r3, [r3, #-999]
 182 00b8 0120A0E3 		mov	r2, #1
 173:board/peripherals/pmc/pmc.c **** }
 183              		.loc 1 173 0
 184 00bc 120003E0 		and	r0, r3, r2, asl r0
 185              	.LVL5:
 186 00c0 1EFF2FE1 		bx	lr
 187              		.cfi_endproc
 188              	.LFE289:
 190              		.align	2
 191              		.global	PMC_CPUInIdleMode
 193              	PMC_CPUInIdleMode:
 194              	.LFB290:
 174:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
 175:board/peripherals/pmc/pmc.c **** /// Put the CPU in Idle Mode for lower consumption
 176:board/peripherals/pmc/pmc.c **** //------------------------------------------------------------------------------
 177:board/peripherals/pmc/pmc.c **** void PMC_CPUInIdleMode(void)
 178:board/peripherals/pmc/pmc.c **** {
 195              		.loc 1 178 0
 196              		.cfi_startproc
 197              		@ Function supports interworking.
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              		@ link register save eliminated.
 201              	.LBB4:
 202              	.LBB5:
  88:board/peripherals/pmc/pmc.c ****     AT91C_BASE_PMC->PMC_SCDR = AT91C_PMC_PCK;   
 203              		.loc 1 88 0
 204 00c4 0020E0E3 		mvn	r2, #0
 205 00c8 0130A0E3 		mov	r3, #1
 206 00cc FB3302E5 		str	r3, [r2, #-1019]
 207              	.L21:
  89:board/peripherals/pmc/pmc.c ****     while ((AT91C_BASE_PMC->PMC_SCSR & AT91C_PMC_PCK) != AT91C_PMC_PCK); 
 208              		.loc 1 89 0
 209 00d0 F73312E5 		ldr	r3, [r2, #-1015]
 210 00d4 010013E3 		tst	r3, #1
 211 00d8 FCFFFF0A 		beq	.L21
 212              	.LBE5:
 213              	.LBE4:
 179:board/peripherals/pmc/pmc.c ****     PMC_DisableProcessorClock();
 180:board/peripherals/pmc/pmc.c **** #ifdef CP15_PRESENT
 181:board/peripherals/pmc/pmc.c ****     _waitForInterrupt();
 182:board/peripherals/pmc/pmc.c **** #endif
 183:board/peripherals/pmc/pmc.c **** }
 214              		.loc 1 183 0
 215 00dc 1EFF2FE1 		bx	lr
 216              		.cfi_endproc
 217              	.LFE290:
 219              	.Letext0:
 220              		.file 2 "board/AT91SAM7S256.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pmc.c
     /tmp/ccfav3hB.s:16     .text:0000000000000000 $a
     /tmp/ccfav3hB.s:19     .text:0000000000000000 PMC_DisableProcessorClock
     /tmp/ccfav3hB.s:45     .text:000000000000001c PMC_EnablePeripheral
     /tmp/ccfav3hB.s:71     .text:000000000000003c PMC_DisablePeripheral
     /tmp/ccfav3hB.s:97     .text:000000000000005c PMC_EnableAllPeripherals
     /tmp/ccfav3hB.s:123    .text:000000000000007c PMC_DisableAllPeripherals
     /tmp/ccfav3hB.s:148    .text:0000000000000098 PMC_IsAllPeriphEnabled
     /tmp/ccfav3hB.s:170    .text:00000000000000b0 PMC_IsPeriphEnabled
     /tmp/ccfav3hB.s:193    .text:00000000000000c4 PMC_CPUInIdleMode
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
