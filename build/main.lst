   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.startup,"ax",%progbits
  17              		.align	2
  18              		.global	main
  20              	main:
  21              	.LFB283:
  22              		.file 1 "main.c"
   1:main.c        **** #include "board.h"
   2:main.c        **** #include "pio/pio.h"
   3:main.c        **** #include "uart.h"
   4:main.c        **** #include "sid.h"
   5:main.c        **** #include "led.h"
   6:main.c        **** 
   7:main.c        **** int main(void) {
  23              		.loc 1 7 0
  24              		.cfi_startproc
  25              		@ Function supports interworking.
  26              		@ args = 0, pretend = 0, frame = 0
  27              		@ frame_needed = 1, uses_anonymous_args = 0
  28              	.LVL0:
   8:main.c        **** 
   9:main.c        **** //	AT91F_PMC_EnablePeriphClock ( AT91C_BASE_PMC, 1 << AT91C_ID_PIOA );
  10:main.c        **** //	AT91F_PIO_CfgOutput( AT91C_BASE_PIOA, LED_MASK );
  11:main.c        **** 
  12:main.c        **** 	AT91PS_AIC     pAic;
  13:main.c        **** 	//* Load System pAic Base address
  14:main.c        **** 	pAic = AT91C_BASE_AIC;
  15:main.c        **** 
  16:main.c        **** 	//* Enable User Reset and set its minimal assertion to 960 us
  17:main.c        **** 	AT91C_BASE_RSTC->RSTC_RMR = AT91C_RSTC_URSTEN | (0x4<<8) | (unsigned int)(0xA5<<24);
  29              		.loc 1 17 0
  30 0000 3C209FE5 		ldr	r2, .L4
  31 0004 0030E0E3 		mvn	r3, #0
   7:main.c        **** int main(void) {
  32              		.loc 1 7 0
  33 0008 0DC0A0E1 		mov	ip, sp
  34              	.LCFI0:
  35              		.cfi_def_cfa_register 12
  36 000c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
  37              		.loc 1 17 0
  38 0010 F72203E5 		str	r2, [r3, #-759]
  39              	.LVL1:
  40              	.LBB6:
  41              	.LBB7:
  42              		.file 2 "board/lib_AT91SAM7S256.h"
   1:board/lib_AT91SAM7S256.h **** //* ----------------------------------------------------------------------------
   2:board/lib_AT91SAM7S256.h **** //*         ATMEL Microcontroller Software Support  -  ROUSSET  -
   3:board/lib_AT91SAM7S256.h **** //* ----------------------------------------------------------------------------
   4:board/lib_AT91SAM7S256.h **** //* DISCLAIMER:  THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
   5:board/lib_AT91SAM7S256.h **** //* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   6:board/lib_AT91SAM7S256.h **** //* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
   7:board/lib_AT91SAM7S256.h **** //* DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
   8:board/lib_AT91SAM7S256.h **** //* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   9:board/lib_AT91SAM7S256.h **** //* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  10:board/lib_AT91SAM7S256.h **** //* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  11:board/lib_AT91SAM7S256.h **** //* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  12:board/lib_AT91SAM7S256.h **** //* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  13:board/lib_AT91SAM7S256.h **** //* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  14:board/lib_AT91SAM7S256.h **** //* ----------------------------------------------------------------------------
  15:board/lib_AT91SAM7S256.h **** //* File Name           : lib_AT91SAM7S256.h
  16:board/lib_AT91SAM7S256.h **** //* Object              : AT91SAM7S256 inlined functions
  17:board/lib_AT91SAM7S256.h **** //* Generated           : AT91 SW Application Group  03/08/2005 (15:46:14)
  18:board/lib_AT91SAM7S256.h **** //*
  19:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_dbgu.h/1.1/Fri Jan 31 12:18:40 2003//
  20:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_pmc_SAM7S.h/1.1/Tue Feb  1 08:32:10 2005//
  21:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_VREG_6085B.h/1.1/Tue Feb  1 16:20:47 2005//
  22:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_rstc_6098A.h/1.1/Wed Oct  6 10:39:20 2004//
  23:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_ssc.h/1.4/Fri Jan 31 12:19:20 2003//
  24:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_wdtc_6080A.h/1.1/Wed Oct  6 10:38:30 2004//
  25:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_usart.h/1.5/Thu Nov 21 16:01:54 2002//
  26:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_spi2.h/1.1/Mon Aug 25 14:23:52 2003//
  27:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_pitc_6079A.h/1.2/Tue Nov  9 14:43:56 2004//
  28:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_aic.h/1.3/Fri Jul 12 08:46:12 2002//
  29:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_twi.h/1.3/Mon Jul 19 14:27:58 2004//
  30:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_adc.h/1.6/Fri Oct 17 09:12:38 2003//
  31:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_rttc_6081A.h/1.1/Wed Oct  6 10:39:38 2004//
  32:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_udp.h/1.4/Wed Feb 16 08:39:34 2005//
  33:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_tc_1753b.h/1.1/Fri Jan 31 12:20:02 2003//
  34:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_MC_SAM7S.h/1.1/Thu Mar 25 15:19:14 2004//
  35:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_pio.h/1.3/Fri Jan 31 12:18:56 2003//
  36:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_PWM_SAM.h/1.3/Thu Jan 22 10:10:50 2004//
  37:board/lib_AT91SAM7S256.h **** //* CVS Reference       : /lib_pdc.h/1.2/Tue Jul  2 13:29:40 2002//
  38:board/lib_AT91SAM7S256.h **** //* ----------------------------------------------------------------------------
  39:board/lib_AT91SAM7S256.h **** #ifndef lib_AT91SAM7S256_H__
  40:board/lib_AT91SAM7S256.h **** #define lib_AT91SAM7S256_H__
  41:board/lib_AT91SAM7S256.h **** 
  42:board/lib_AT91SAM7S256.h **** /* *****************************************************************************
  43:board/lib_AT91SAM7S256.h ****                 SOFTWARE API FOR AIC
  44:board/lib_AT91SAM7S256.h ****    ***************************************************************************** */
  45:board/lib_AT91SAM7S256.h **** #define AT91C_AIC_BRANCH_OPCODE ((void (*) ()) 0xE51FFF20) // ldr, pc, [pc, #-&F20]
  46:board/lib_AT91SAM7S256.h **** 
  47:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
  48:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_ConfigureIt
  49:board/lib_AT91SAM7S256.h **** //* \brief Interrupt Handler Initialization
  50:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
  51:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_AIC_ConfigureIt (
  52:board/lib_AT91SAM7S256.h **** 	AT91PS_AIC pAic,  // \arg pointer to the AIC registers
  53:board/lib_AT91SAM7S256.h **** 	unsigned int irq_id,     // \arg interrupt number to initialize
  54:board/lib_AT91SAM7S256.h **** 	unsigned int priority,   // \arg priority to give to the interrupt
  55:board/lib_AT91SAM7S256.h **** 	unsigned int src_type,   // \arg activation and sense of activation
  56:board/lib_AT91SAM7S256.h **** 	void (*newHandler) (void) ) // \arg address of the interrupt handler
  57:board/lib_AT91SAM7S256.h **** {
  58:board/lib_AT91SAM7S256.h **** 	unsigned int oldHandler;
  59:board/lib_AT91SAM7S256.h ****     unsigned int mask ;
  60:board/lib_AT91SAM7S256.h **** 
  61:board/lib_AT91SAM7S256.h ****     oldHandler = pAic->AIC_SVR[irq_id];
  62:board/lib_AT91SAM7S256.h **** 
  63:board/lib_AT91SAM7S256.h ****     mask = 0x1 << irq_id ;
  64:board/lib_AT91SAM7S256.h ****     //* Disable the interrupt on the interrupt controller
  65:board/lib_AT91SAM7S256.h ****     pAic->AIC_IDCR = mask ;
  66:board/lib_AT91SAM7S256.h ****     //* Save the interrupt handler routine pointer and the interrupt priority
  67:board/lib_AT91SAM7S256.h ****     pAic->AIC_SVR[irq_id] = (unsigned int) newHandler ;
  68:board/lib_AT91SAM7S256.h ****     //* Store the Source Mode Register
  69:board/lib_AT91SAM7S256.h ****     pAic->AIC_SMR[irq_id] = src_type | priority  ;
  70:board/lib_AT91SAM7S256.h ****     //* Clear the interrupt on the interrupt controller
  71:board/lib_AT91SAM7S256.h ****     pAic->AIC_ICCR = mask ;
  72:board/lib_AT91SAM7S256.h **** 
  73:board/lib_AT91SAM7S256.h **** 	return oldHandler;
  74:board/lib_AT91SAM7S256.h **** }
  75:board/lib_AT91SAM7S256.h **** 
  76:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
  77:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_EnableIt
  78:board/lib_AT91SAM7S256.h **** //* \brief Enable corresponding IT number
  79:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
  80:board/lib_AT91SAM7S256.h **** __inline void AT91F_AIC_EnableIt (
  81:board/lib_AT91SAM7S256.h **** 	AT91PS_AIC pAic,      // \arg pointer to the AIC registers
  82:board/lib_AT91SAM7S256.h **** 	unsigned int irq_id ) // \arg interrupt number to initialize
  83:board/lib_AT91SAM7S256.h **** {
  84:board/lib_AT91SAM7S256.h ****     //* Enable the interrupt on the interrupt controller
  85:board/lib_AT91SAM7S256.h ****     pAic->AIC_IECR = 0x1 << irq_id ;
  86:board/lib_AT91SAM7S256.h **** }
  87:board/lib_AT91SAM7S256.h **** 
  88:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
  89:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_DisableIt
  90:board/lib_AT91SAM7S256.h **** //* \brief Disable corresponding IT number
  91:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
  92:board/lib_AT91SAM7S256.h **** __inline void AT91F_AIC_DisableIt (
  93:board/lib_AT91SAM7S256.h **** 	AT91PS_AIC pAic,      // \arg pointer to the AIC registers
  94:board/lib_AT91SAM7S256.h **** 	unsigned int irq_id ) // \arg interrupt number to initialize
  95:board/lib_AT91SAM7S256.h **** {
  96:board/lib_AT91SAM7S256.h ****     unsigned int mask = 0x1 << irq_id;
  97:board/lib_AT91SAM7S256.h ****     //* Disable the interrupt on the interrupt controller
  98:board/lib_AT91SAM7S256.h ****     pAic->AIC_IDCR = mask ;
  99:board/lib_AT91SAM7S256.h ****     //* Clear the interrupt on the Interrupt Controller ( if one is pending )
 100:board/lib_AT91SAM7S256.h ****     pAic->AIC_ICCR = mask ;
 101:board/lib_AT91SAM7S256.h **** }
 102:board/lib_AT91SAM7S256.h **** 
 103:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 104:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_ClearIt
 105:board/lib_AT91SAM7S256.h **** //* \brief Clear corresponding IT number
 106:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 107:board/lib_AT91SAM7S256.h **** __inline void AT91F_AIC_ClearIt (
 108:board/lib_AT91SAM7S256.h **** 	AT91PS_AIC pAic,     // \arg pointer to the AIC registers
 109:board/lib_AT91SAM7S256.h **** 	unsigned int irq_id) // \arg interrupt number to initialize
 110:board/lib_AT91SAM7S256.h **** {
 111:board/lib_AT91SAM7S256.h ****     //* Clear the interrupt on the Interrupt Controller ( if one is pending )
 112:board/lib_AT91SAM7S256.h ****     pAic->AIC_ICCR = (0x1 << irq_id);
 113:board/lib_AT91SAM7S256.h **** }
 114:board/lib_AT91SAM7S256.h **** 
 115:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 116:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_AcknowledgeIt
 117:board/lib_AT91SAM7S256.h **** //* \brief Acknowledge corresponding IT number
 118:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 119:board/lib_AT91SAM7S256.h **** __inline void AT91F_AIC_AcknowledgeIt (
 120:board/lib_AT91SAM7S256.h **** 	AT91PS_AIC pAic)     // \arg pointer to the AIC registers
 121:board/lib_AT91SAM7S256.h **** {
 122:board/lib_AT91SAM7S256.h ****     pAic->AIC_EOICR = pAic->AIC_EOICR;
 123:board/lib_AT91SAM7S256.h **** }
 124:board/lib_AT91SAM7S256.h **** 
 125:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 126:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_SetExceptionVector
 127:board/lib_AT91SAM7S256.h **** //* \brief Configure vector handler
 128:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 129:board/lib_AT91SAM7S256.h **** __inline unsigned int  AT91F_AIC_SetExceptionVector (
 130:board/lib_AT91SAM7S256.h **** 	unsigned int *pVector, // \arg pointer to the AIC registers
 131:board/lib_AT91SAM7S256.h **** 	void (*Handler) () )   // \arg Interrupt Handler
 132:board/lib_AT91SAM7S256.h **** {
 133:board/lib_AT91SAM7S256.h **** 	unsigned int oldVector = *pVector;
 134:board/lib_AT91SAM7S256.h **** 
 135:board/lib_AT91SAM7S256.h **** 	if ((unsigned int) Handler == (unsigned int) AT91C_AIC_BRANCH_OPCODE)
 136:board/lib_AT91SAM7S256.h **** 		*pVector = (unsigned int) AT91C_AIC_BRANCH_OPCODE;
 137:board/lib_AT91SAM7S256.h **** 	else
 138:board/lib_AT91SAM7S256.h **** 		*pVector = (((((unsigned int) Handler) - ((unsigned int) pVector) - 0x8) >> 2) & 0x00FFFFFF) | 0x
 139:board/lib_AT91SAM7S256.h **** 
 140:board/lib_AT91SAM7S256.h **** 	return oldVector;
 141:board/lib_AT91SAM7S256.h **** }
 142:board/lib_AT91SAM7S256.h **** 
 143:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 144:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_Trig
 145:board/lib_AT91SAM7S256.h **** //* \brief Trig an IT
 146:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 147:board/lib_AT91SAM7S256.h **** __inline void  AT91F_AIC_Trig (
 148:board/lib_AT91SAM7S256.h **** 	AT91PS_AIC pAic,     // \arg pointer to the AIC registers
 149:board/lib_AT91SAM7S256.h **** 	unsigned int irq_id) // \arg interrupt number
 150:board/lib_AT91SAM7S256.h **** {
 151:board/lib_AT91SAM7S256.h **** 	pAic->AIC_ISCR = (0x1 << irq_id) ;
 152:board/lib_AT91SAM7S256.h **** }
 153:board/lib_AT91SAM7S256.h **** 
 154:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 155:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_IsActive
 156:board/lib_AT91SAM7S256.h **** //* \brief Test if an IT is active
 157:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 158:board/lib_AT91SAM7S256.h **** __inline unsigned int  AT91F_AIC_IsActive (
 159:board/lib_AT91SAM7S256.h **** 	AT91PS_AIC pAic,     // \arg pointer to the AIC registers
 160:board/lib_AT91SAM7S256.h **** 	unsigned int irq_id) // \arg Interrupt Number
 161:board/lib_AT91SAM7S256.h **** {
 162:board/lib_AT91SAM7S256.h **** 	return (pAic->AIC_ISR & (0x1 << irq_id));
 163:board/lib_AT91SAM7S256.h **** }
 164:board/lib_AT91SAM7S256.h **** 
 165:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 166:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_IsPending
 167:board/lib_AT91SAM7S256.h **** //* \brief Test if an IT is pending
 168:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 169:board/lib_AT91SAM7S256.h **** __inline unsigned int  AT91F_AIC_IsPending (
 170:board/lib_AT91SAM7S256.h **** 	AT91PS_AIC pAic,     // \arg pointer to the AIC registers
 171:board/lib_AT91SAM7S256.h **** 	unsigned int irq_id) // \arg Interrupt Number
 172:board/lib_AT91SAM7S256.h **** {
 173:board/lib_AT91SAM7S256.h **** 	return (pAic->AIC_IPR & (0x1 << irq_id));
 174:board/lib_AT91SAM7S256.h **** }
 175:board/lib_AT91SAM7S256.h **** 
 176:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 177:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_AIC_Open
 178:board/lib_AT91SAM7S256.h **** //* \brief Set exception vectors and AIC registers to default values
 179:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 180:board/lib_AT91SAM7S256.h **** __inline void AT91F_AIC_Open(
 181:board/lib_AT91SAM7S256.h **** 	AT91PS_AIC pAic,        // \arg pointer to the AIC registers
 182:board/lib_AT91SAM7S256.h **** 	void (*IrqHandler) (),  // \arg Default IRQ vector exception
 183:board/lib_AT91SAM7S256.h **** 	void (*FiqHandler) (),  // \arg Default FIQ vector exception
 184:board/lib_AT91SAM7S256.h **** 	void (*DefaultHandler)  (), // \arg Default Handler set in ISR
 185:board/lib_AT91SAM7S256.h **** 	void (*SpuriousHandler) (), // \arg Default Spurious Handler
 186:board/lib_AT91SAM7S256.h **** 	unsigned int protectMode)   // \arg Debug Control Register
 187:board/lib_AT91SAM7S256.h **** {
 188:board/lib_AT91SAM7S256.h **** 	int i;
 189:board/lib_AT91SAM7S256.h **** 
 190:board/lib_AT91SAM7S256.h **** 	// Disable all interrupts and set IVR to the default handler
 191:board/lib_AT91SAM7S256.h **** 	for (i = 0; i < 32; ++i) {
 192:board/lib_AT91SAM7S256.h **** 		AT91F_AIC_DisableIt(pAic, i);
 193:board/lib_AT91SAM7S256.h **** 		AT91F_AIC_ConfigureIt(pAic, i, AT91C_AIC_PRIOR_LOWEST, AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL, DefaultH
 194:board/lib_AT91SAM7S256.h **** 	}
 195:board/lib_AT91SAM7S256.h **** 
 196:board/lib_AT91SAM7S256.h **** 	// Set the IRQ exception vector
 197:board/lib_AT91SAM7S256.h **** 	AT91F_AIC_SetExceptionVector((unsigned int *) 0x18, IrqHandler);
 198:board/lib_AT91SAM7S256.h **** 	// Set the Fast Interrupt exception vector
 199:board/lib_AT91SAM7S256.h **** 	AT91F_AIC_SetExceptionVector((unsigned int *) 0x1C, FiqHandler);
 200:board/lib_AT91SAM7S256.h **** 
 201:board/lib_AT91SAM7S256.h **** 	pAic->AIC_SPU = (unsigned int) SpuriousHandler;
 202:board/lib_AT91SAM7S256.h **** 	pAic->AIC_DCR = protectMode;
 203:board/lib_AT91SAM7S256.h **** }
 204:board/lib_AT91SAM7S256.h **** /* *****************************************************************************
 205:board/lib_AT91SAM7S256.h ****                 SOFTWARE API FOR PDC
 206:board/lib_AT91SAM7S256.h ****    ***************************************************************************** */
 207:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 208:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_SetNextRx
 209:board/lib_AT91SAM7S256.h **** //* \brief Set the next receive transfer descriptor
 210:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 211:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_SetNextRx (
 212:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC,     // \arg pointer to a PDC controller
 213:board/lib_AT91SAM7S256.h **** 	char *address,       // \arg address to the next bloc to be received
 214:board/lib_AT91SAM7S256.h **** 	unsigned int bytes)  // \arg number of bytes to be received
 215:board/lib_AT91SAM7S256.h **** {
 216:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_RNPR = (unsigned int) address;
 217:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_RNCR = bytes;
 218:board/lib_AT91SAM7S256.h **** }
 219:board/lib_AT91SAM7S256.h **** 
 220:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 221:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_SetNextTx
 222:board/lib_AT91SAM7S256.h **** //* \brief Set the next transmit transfer descriptor
 223:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 224:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_SetNextTx (
 225:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC,       // \arg pointer to a PDC controller
 226:board/lib_AT91SAM7S256.h **** 	char *address,         // \arg address to the next bloc to be transmitted
 227:board/lib_AT91SAM7S256.h **** 	unsigned int bytes)    // \arg number of bytes to be transmitted
 228:board/lib_AT91SAM7S256.h **** {
 229:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_TNPR = (unsigned int) address;
 230:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_TNCR = bytes;
 231:board/lib_AT91SAM7S256.h **** }
 232:board/lib_AT91SAM7S256.h **** 
 233:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 234:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_SetRx
 235:board/lib_AT91SAM7S256.h **** //* \brief Set the receive transfer descriptor
 236:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 237:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_SetRx (
 238:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC,       // \arg pointer to a PDC controller
 239:board/lib_AT91SAM7S256.h **** 	char *address,         // \arg address to the next bloc to be received
 240:board/lib_AT91SAM7S256.h **** 	unsigned int bytes)    // \arg number of bytes to be received
 241:board/lib_AT91SAM7S256.h **** {
 242:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_RPR = (unsigned int) address;
 243:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_RCR = bytes;
 244:board/lib_AT91SAM7S256.h **** }
 245:board/lib_AT91SAM7S256.h **** 
 246:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 247:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_SetTx
 248:board/lib_AT91SAM7S256.h **** //* \brief Set the transmit transfer descriptor
 249:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 250:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_SetTx (
 251:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC,       // \arg pointer to a PDC controller
 252:board/lib_AT91SAM7S256.h **** 	char *address,         // \arg address to the next bloc to be transmitted
 253:board/lib_AT91SAM7S256.h **** 	unsigned int bytes)    // \arg number of bytes to be transmitted
 254:board/lib_AT91SAM7S256.h **** {
 255:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_TPR = (unsigned int) address;
 256:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_TCR = bytes;
 257:board/lib_AT91SAM7S256.h **** }
 258:board/lib_AT91SAM7S256.h **** 
 259:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 260:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_EnableTx
 261:board/lib_AT91SAM7S256.h **** //* \brief Enable transmit
 262:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 263:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_EnableTx (
 264:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 265:board/lib_AT91SAM7S256.h **** {
 266:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_PTCR = AT91C_PDC_TXTEN;
 267:board/lib_AT91SAM7S256.h **** }
 268:board/lib_AT91SAM7S256.h **** 
 269:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 270:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_EnableRx
 271:board/lib_AT91SAM7S256.h **** //* \brief Enable receive
 272:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 273:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_EnableRx (
 274:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 275:board/lib_AT91SAM7S256.h **** {
 276:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_PTCR = AT91C_PDC_RXTEN;
 277:board/lib_AT91SAM7S256.h **** }
 278:board/lib_AT91SAM7S256.h **** 
 279:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 280:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_DisableTx
 281:board/lib_AT91SAM7S256.h **** //* \brief Disable transmit
 282:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 283:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_DisableTx (
 284:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 285:board/lib_AT91SAM7S256.h **** {
 286:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_PTCR = AT91C_PDC_TXTDIS;
 287:board/lib_AT91SAM7S256.h **** }
 288:board/lib_AT91SAM7S256.h **** 
 289:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 290:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_DisableRx
 291:board/lib_AT91SAM7S256.h **** //* \brief Disable receive
 292:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 293:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_DisableRx (
 294:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 295:board/lib_AT91SAM7S256.h **** {
 296:board/lib_AT91SAM7S256.h **** 	pPDC->PDC_PTCR = AT91C_PDC_RXTDIS;
 297:board/lib_AT91SAM7S256.h **** }
 298:board/lib_AT91SAM7S256.h **** 
 299:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 300:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_IsTxEmpty
 301:board/lib_AT91SAM7S256.h **** //* \brief Test if the current transfer descriptor has been sent
 302:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 303:board/lib_AT91SAM7S256.h **** __inline int AT91F_PDC_IsTxEmpty ( // \return return 1 if transfer is complete
 304:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 305:board/lib_AT91SAM7S256.h **** {
 306:board/lib_AT91SAM7S256.h **** 	return !(pPDC->PDC_TCR);
 307:board/lib_AT91SAM7S256.h **** }
 308:board/lib_AT91SAM7S256.h **** 
 309:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 310:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_IsNextTxEmpty
 311:board/lib_AT91SAM7S256.h **** //* \brief Test if the next transfer descriptor has been moved to the current td
 312:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 313:board/lib_AT91SAM7S256.h **** __inline int AT91F_PDC_IsNextTxEmpty ( // \return return 1 if transfer is complete
 314:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 315:board/lib_AT91SAM7S256.h **** {
 316:board/lib_AT91SAM7S256.h **** 	return !(pPDC->PDC_TNCR);
 317:board/lib_AT91SAM7S256.h **** }
 318:board/lib_AT91SAM7S256.h **** 
 319:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 320:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_IsRxEmpty
 321:board/lib_AT91SAM7S256.h **** //* \brief Test if the current transfer descriptor has been filled
 322:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 323:board/lib_AT91SAM7S256.h **** __inline int AT91F_PDC_IsRxEmpty ( // \return return 1 if transfer is complete
 324:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 325:board/lib_AT91SAM7S256.h **** {
 326:board/lib_AT91SAM7S256.h **** 	return !(pPDC->PDC_RCR);
 327:board/lib_AT91SAM7S256.h **** }
 328:board/lib_AT91SAM7S256.h **** 
 329:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 330:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_IsNextRxEmpty
 331:board/lib_AT91SAM7S256.h **** //* \brief Test if the next transfer descriptor has been moved to the current td
 332:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 333:board/lib_AT91SAM7S256.h **** __inline int AT91F_PDC_IsNextRxEmpty ( // \return return 1 if transfer is complete
 334:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 335:board/lib_AT91SAM7S256.h **** {
 336:board/lib_AT91SAM7S256.h **** 	return !(pPDC->PDC_RNCR);
 337:board/lib_AT91SAM7S256.h **** }
 338:board/lib_AT91SAM7S256.h **** 
 339:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 340:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_Open
 341:board/lib_AT91SAM7S256.h **** //* \brief Open PDC: disable TX and RX reset transfer descriptors, re-enable RX and TX
 342:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 343:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_Open (
 344:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC)       // \arg pointer to a PDC controller
 345:board/lib_AT91SAM7S256.h **** {
 346:board/lib_AT91SAM7S256.h ****     //* Disable the RX and TX PDC transfer requests
 347:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_DisableRx(pPDC);
 348:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_DisableTx(pPDC);
 349:board/lib_AT91SAM7S256.h **** 
 350:board/lib_AT91SAM7S256.h **** 	//* Reset all Counter register Next buffer first
 351:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_SetNextTx(pPDC, (char *) 0, 0);
 352:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_SetNextRx(pPDC, (char *) 0, 0);
 353:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_SetTx(pPDC, (char *) 0, 0);
 354:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_SetRx(pPDC, (char *) 0, 0);
 355:board/lib_AT91SAM7S256.h **** 
 356:board/lib_AT91SAM7S256.h ****     //* Enable the RX and TX PDC transfer requests
 357:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_EnableRx(pPDC);
 358:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_EnableTx(pPDC);
 359:board/lib_AT91SAM7S256.h **** }
 360:board/lib_AT91SAM7S256.h **** 
 361:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 362:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_Close
 363:board/lib_AT91SAM7S256.h **** //* \brief Close PDC: disable TX and RX reset transfer descriptors
 364:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 365:board/lib_AT91SAM7S256.h **** __inline void AT91F_PDC_Close (
 366:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC)       // \arg pointer to a PDC controller
 367:board/lib_AT91SAM7S256.h **** {
 368:board/lib_AT91SAM7S256.h ****     //* Disable the RX and TX PDC transfer requests
 369:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_DisableRx(pPDC);
 370:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_DisableTx(pPDC);
 371:board/lib_AT91SAM7S256.h **** 
 372:board/lib_AT91SAM7S256.h **** 	//* Reset all Counter register Next buffer first
 373:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_SetNextTx(pPDC, (char *) 0, 0);
 374:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_SetNextRx(pPDC, (char *) 0, 0);
 375:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_SetTx(pPDC, (char *) 0, 0);
 376:board/lib_AT91SAM7S256.h **** 	AT91F_PDC_SetRx(pPDC, (char *) 0, 0);
 377:board/lib_AT91SAM7S256.h **** 
 378:board/lib_AT91SAM7S256.h **** }
 379:board/lib_AT91SAM7S256.h **** 
 380:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 381:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_SendFrame
 382:board/lib_AT91SAM7S256.h **** //* \brief Close PDC: disable TX and RX reset transfer descriptors
 383:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 384:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PDC_SendFrame(
 385:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC,
 386:board/lib_AT91SAM7S256.h **** 	char *pBuffer,
 387:board/lib_AT91SAM7S256.h **** 	unsigned int szBuffer,
 388:board/lib_AT91SAM7S256.h **** 	char *pNextBuffer,
 389:board/lib_AT91SAM7S256.h **** 	unsigned int szNextBuffer )
 390:board/lib_AT91SAM7S256.h **** {
 391:board/lib_AT91SAM7S256.h **** 	if (AT91F_PDC_IsTxEmpty(pPDC)) {
 392:board/lib_AT91SAM7S256.h **** 		//* Buffer and next buffer can be initialized
 393:board/lib_AT91SAM7S256.h **** 		AT91F_PDC_SetTx(pPDC, pBuffer, szBuffer);
 394:board/lib_AT91SAM7S256.h **** 		AT91F_PDC_SetNextTx(pPDC, pNextBuffer, szNextBuffer);
 395:board/lib_AT91SAM7S256.h **** 		return 2;
 396:board/lib_AT91SAM7S256.h **** 	}
 397:board/lib_AT91SAM7S256.h **** 	else if (AT91F_PDC_IsNextTxEmpty(pPDC)) {
 398:board/lib_AT91SAM7S256.h **** 		//* Only one buffer can be initialized
 399:board/lib_AT91SAM7S256.h **** 		AT91F_PDC_SetNextTx(pPDC, pBuffer, szBuffer);
 400:board/lib_AT91SAM7S256.h **** 		return 1;
 401:board/lib_AT91SAM7S256.h **** 	}
 402:board/lib_AT91SAM7S256.h **** 	else {
 403:board/lib_AT91SAM7S256.h **** 		//* All buffer are in use...
 404:board/lib_AT91SAM7S256.h **** 		return 0;
 405:board/lib_AT91SAM7S256.h **** 	}
 406:board/lib_AT91SAM7S256.h **** }
 407:board/lib_AT91SAM7S256.h **** 
 408:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 409:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PDC_ReceiveFrame
 410:board/lib_AT91SAM7S256.h **** //* \brief Close PDC: disable TX and RX reset transfer descriptors
 411:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 412:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PDC_ReceiveFrame (
 413:board/lib_AT91SAM7S256.h **** 	AT91PS_PDC pPDC,
 414:board/lib_AT91SAM7S256.h **** 	char *pBuffer,
 415:board/lib_AT91SAM7S256.h **** 	unsigned int szBuffer,
 416:board/lib_AT91SAM7S256.h **** 	char *pNextBuffer,
 417:board/lib_AT91SAM7S256.h **** 	unsigned int szNextBuffer )
 418:board/lib_AT91SAM7S256.h **** {
 419:board/lib_AT91SAM7S256.h **** 	if (AT91F_PDC_IsRxEmpty(pPDC)) {
 420:board/lib_AT91SAM7S256.h **** 		//* Buffer and next buffer can be initialized
 421:board/lib_AT91SAM7S256.h **** 		AT91F_PDC_SetRx(pPDC, pBuffer, szBuffer);
 422:board/lib_AT91SAM7S256.h **** 		AT91F_PDC_SetNextRx(pPDC, pNextBuffer, szNextBuffer);
 423:board/lib_AT91SAM7S256.h **** 		return 2;
 424:board/lib_AT91SAM7S256.h **** 	}
 425:board/lib_AT91SAM7S256.h **** 	else if (AT91F_PDC_IsNextRxEmpty(pPDC)) {
 426:board/lib_AT91SAM7S256.h **** 		//* Only one buffer can be initialized
 427:board/lib_AT91SAM7S256.h **** 		AT91F_PDC_SetNextRx(pPDC, pBuffer, szBuffer);
 428:board/lib_AT91SAM7S256.h **** 		return 1;
 429:board/lib_AT91SAM7S256.h **** 	}
 430:board/lib_AT91SAM7S256.h **** 	else {
 431:board/lib_AT91SAM7S256.h **** 		//* All buffer are in use...
 432:board/lib_AT91SAM7S256.h **** 		return 0;
 433:board/lib_AT91SAM7S256.h **** 	}
 434:board/lib_AT91SAM7S256.h **** }
 435:board/lib_AT91SAM7S256.h **** /* *****************************************************************************
 436:board/lib_AT91SAM7S256.h ****                 SOFTWARE API FOR DBGU
 437:board/lib_AT91SAM7S256.h ****    ***************************************************************************** */
 438:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 439:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_DBGU_InterruptEnable
 440:board/lib_AT91SAM7S256.h **** //* \brief Enable DBGU Interrupt
 441:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 442:board/lib_AT91SAM7S256.h **** __inline void AT91F_DBGU_InterruptEnable(
 443:board/lib_AT91SAM7S256.h ****         AT91PS_DBGU pDbgu,   // \arg  pointer to a DBGU controller
 444:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  dbgu interrupt to be enabled
 445:board/lib_AT91SAM7S256.h **** {
 446:board/lib_AT91SAM7S256.h ****         pDbgu->DBGU_IER = flag;
 447:board/lib_AT91SAM7S256.h **** }
 448:board/lib_AT91SAM7S256.h **** 
 449:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 450:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_DBGU_InterruptDisable
 451:board/lib_AT91SAM7S256.h **** //* \brief Disable DBGU Interrupt
 452:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 453:board/lib_AT91SAM7S256.h **** __inline void AT91F_DBGU_InterruptDisable(
 454:board/lib_AT91SAM7S256.h ****         AT91PS_DBGU pDbgu,   // \arg  pointer to a DBGU controller
 455:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  dbgu interrupt to be disabled
 456:board/lib_AT91SAM7S256.h **** {
 457:board/lib_AT91SAM7S256.h ****         pDbgu->DBGU_IDR = flag;
 458:board/lib_AT91SAM7S256.h **** }
 459:board/lib_AT91SAM7S256.h **** 
 460:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 461:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_DBGU_GetInterruptMaskStatus
 462:board/lib_AT91SAM7S256.h **** //* \brief Return DBGU Interrupt Mask Status
 463:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 464:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_DBGU_GetInterruptMaskStatus( // \return DBGU Interrupt Mask Status
 465:board/lib_AT91SAM7S256.h ****         AT91PS_DBGU pDbgu) // \arg  pointer to a DBGU controller
 466:board/lib_AT91SAM7S256.h **** {
 467:board/lib_AT91SAM7S256.h ****         return pDbgu->DBGU_IMR;
 468:board/lib_AT91SAM7S256.h **** }
 469:board/lib_AT91SAM7S256.h **** 
 470:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 471:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_DBGU_IsInterruptMasked
 472:board/lib_AT91SAM7S256.h **** //* \brief Test if DBGU Interrupt is Masked
 473:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 474:board/lib_AT91SAM7S256.h **** __inline int AT91F_DBGU_IsInterruptMasked(
 475:board/lib_AT91SAM7S256.h ****         AT91PS_DBGU pDbgu,   // \arg  pointer to a DBGU controller
 476:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 477:board/lib_AT91SAM7S256.h **** {
 478:board/lib_AT91SAM7S256.h ****         return (AT91F_DBGU_GetInterruptMaskStatus(pDbgu) & flag);
 479:board/lib_AT91SAM7S256.h **** }
 480:board/lib_AT91SAM7S256.h **** 
 481:board/lib_AT91SAM7S256.h **** /* *****************************************************************************
 482:board/lib_AT91SAM7S256.h ****                 SOFTWARE API FOR PIO
 483:board/lib_AT91SAM7S256.h ****    ***************************************************************************** */
 484:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 485:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_CfgPeriph
 486:board/lib_AT91SAM7S256.h **** //* \brief Enable pins to be drived by peripheral
 487:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 488:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_CfgPeriph(
 489:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 490:board/lib_AT91SAM7S256.h **** 	unsigned int periphAEnable,  // \arg PERIPH A to enable
 491:board/lib_AT91SAM7S256.h **** 	unsigned int periphBEnable)  // \arg PERIPH B to enable
 492:board/lib_AT91SAM7S256.h **** 
 493:board/lib_AT91SAM7S256.h **** {
 494:board/lib_AT91SAM7S256.h **** 	pPio->PIO_ASR = periphAEnable;
 495:board/lib_AT91SAM7S256.h **** 	pPio->PIO_BSR = periphBEnable;
 496:board/lib_AT91SAM7S256.h **** 	pPio->PIO_PDR = (periphAEnable | periphBEnable); // Set in Periph mode
 497:board/lib_AT91SAM7S256.h **** }
 498:board/lib_AT91SAM7S256.h **** 
 499:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 500:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_CfgOutput
 501:board/lib_AT91SAM7S256.h **** //* \brief Enable PIO in output mode
 502:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 503:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_CfgOutput(
 504:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 505:board/lib_AT91SAM7S256.h **** 	unsigned int pioEnable)      // \arg PIO to be enabled
 506:board/lib_AT91SAM7S256.h **** {
 507:board/lib_AT91SAM7S256.h **** 	pPio->PIO_PER = pioEnable; // Set in PIO mode
 508:board/lib_AT91SAM7S256.h **** 	pPio->PIO_OER = pioEnable; // Configure in Output
 509:board/lib_AT91SAM7S256.h **** }
 510:board/lib_AT91SAM7S256.h **** 
 511:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 512:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_CfgInput
 513:board/lib_AT91SAM7S256.h **** //* \brief Enable PIO in input mode
 514:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 515:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_CfgInput(
 516:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 517:board/lib_AT91SAM7S256.h **** 	unsigned int inputEnable)      // \arg PIO to be enabled
 518:board/lib_AT91SAM7S256.h **** {
 519:board/lib_AT91SAM7S256.h **** 	// Disable output
 520:board/lib_AT91SAM7S256.h **** 	pPio->PIO_ODR  = inputEnable;
 521:board/lib_AT91SAM7S256.h **** 	pPio->PIO_PER  = inputEnable;
 522:board/lib_AT91SAM7S256.h **** }
 523:board/lib_AT91SAM7S256.h **** 
 524:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 525:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_CfgOpendrain
 526:board/lib_AT91SAM7S256.h **** //* \brief Configure PIO in open drain
 527:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 528:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_CfgOpendrain(
 529:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 530:board/lib_AT91SAM7S256.h **** 	unsigned int multiDrvEnable) // \arg pio to be configured in open drain
 531:board/lib_AT91SAM7S256.h **** {
 532:board/lib_AT91SAM7S256.h **** 	// Configure the multi-drive option
 533:board/lib_AT91SAM7S256.h **** 	pPio->PIO_MDDR = ~multiDrvEnable;
 534:board/lib_AT91SAM7S256.h **** 	pPio->PIO_MDER = multiDrvEnable;
 535:board/lib_AT91SAM7S256.h **** }
 536:board/lib_AT91SAM7S256.h **** 
 537:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 538:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_CfgPullup
 539:board/lib_AT91SAM7S256.h **** //* \brief Enable pullup on PIO
 540:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 541:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_CfgPullup(
 542:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 543:board/lib_AT91SAM7S256.h **** 	unsigned int pullupEnable)   // \arg enable pullup on PIO
 544:board/lib_AT91SAM7S256.h **** {
 545:board/lib_AT91SAM7S256.h **** 		// Connect or not Pullup
 546:board/lib_AT91SAM7S256.h **** 	pPio->PIO_PPUDR = ~pullupEnable;
 547:board/lib_AT91SAM7S256.h **** 	pPio->PIO_PPUER = pullupEnable;
 548:board/lib_AT91SAM7S256.h **** }
 549:board/lib_AT91SAM7S256.h **** 
 550:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 551:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_CfgDirectDrive
 552:board/lib_AT91SAM7S256.h **** //* \brief Enable direct drive on PIO
 553:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 554:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_CfgDirectDrive(
 555:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 556:board/lib_AT91SAM7S256.h **** 	unsigned int directDrive)    // \arg PIO to be configured with direct drive
 557:board/lib_AT91SAM7S256.h **** 
 558:board/lib_AT91SAM7S256.h **** {
 559:board/lib_AT91SAM7S256.h **** 	// Configure the Direct Drive
 560:board/lib_AT91SAM7S256.h **** 	pPio->PIO_OWDR  = ~directDrive;
 561:board/lib_AT91SAM7S256.h **** 	pPio->PIO_OWER  = directDrive;
 562:board/lib_AT91SAM7S256.h **** }
 563:board/lib_AT91SAM7S256.h **** 
 564:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 565:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_CfgInputFilter
 566:board/lib_AT91SAM7S256.h **** //* \brief Enable input filter on input PIO
 567:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 568:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_CfgInputFilter(
 569:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 570:board/lib_AT91SAM7S256.h **** 	unsigned int inputFilter)    // \arg PIO to be configured with input filter
 571:board/lib_AT91SAM7S256.h **** 
 572:board/lib_AT91SAM7S256.h **** {
 573:board/lib_AT91SAM7S256.h **** 	// Configure the Direct Drive
 574:board/lib_AT91SAM7S256.h **** 	pPio->PIO_IFDR  = ~inputFilter;
 575:board/lib_AT91SAM7S256.h **** 	pPio->PIO_IFER  = inputFilter;
 576:board/lib_AT91SAM7S256.h **** }
 577:board/lib_AT91SAM7S256.h **** 
 578:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 579:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetInput
 580:board/lib_AT91SAM7S256.h **** //* \brief Return PIO input value
 581:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 582:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetInput( // \return PIO input
 583:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 584:board/lib_AT91SAM7S256.h **** {
 585:board/lib_AT91SAM7S256.h **** 	return pPio->PIO_PDSR;
 586:board/lib_AT91SAM7S256.h **** }
 587:board/lib_AT91SAM7S256.h **** 
 588:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 589:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsInputSet
 590:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO is input flag is active
 591:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 592:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsInputSet(
 593:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 594:board/lib_AT91SAM7S256.h **** 	unsigned int flag) // \arg  flag to be tested
 595:board/lib_AT91SAM7S256.h **** {
 596:board/lib_AT91SAM7S256.h **** 	return (AT91F_PIO_GetInput(pPio) & flag);
 597:board/lib_AT91SAM7S256.h **** }
 598:board/lib_AT91SAM7S256.h **** 
 599:board/lib_AT91SAM7S256.h **** 
 600:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 601:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_SetOutput
 602:board/lib_AT91SAM7S256.h **** //* \brief Set to 1 output PIO
 603:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 604:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_SetOutput(
 605:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 606:board/lib_AT91SAM7S256.h **** 	unsigned int flag) // \arg  output to be set
 607:board/lib_AT91SAM7S256.h **** {
 608:board/lib_AT91SAM7S256.h **** 	pPio->PIO_SODR = flag;
 609:board/lib_AT91SAM7S256.h **** }
 610:board/lib_AT91SAM7S256.h **** 
 611:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 612:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_ClearOutput
 613:board/lib_AT91SAM7S256.h **** //* \brief Set to 0 output PIO
 614:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 615:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_ClearOutput(
 616:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 617:board/lib_AT91SAM7S256.h **** 	unsigned int flag) // \arg  output to be cleared
 618:board/lib_AT91SAM7S256.h **** {
 619:board/lib_AT91SAM7S256.h **** 	pPio->PIO_CODR = flag;
 620:board/lib_AT91SAM7S256.h **** }
 621:board/lib_AT91SAM7S256.h **** 
 622:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 623:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_ForceOutput
 624:board/lib_AT91SAM7S256.h **** //* \brief Force output when Direct drive option is enabled
 625:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 626:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_ForceOutput(
 627:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 628:board/lib_AT91SAM7S256.h **** 	unsigned int flag) // \arg  output to be forced
 629:board/lib_AT91SAM7S256.h **** {
 630:board/lib_AT91SAM7S256.h **** 	pPio->PIO_ODSR = flag;
 631:board/lib_AT91SAM7S256.h **** }
 632:board/lib_AT91SAM7S256.h **** 
 633:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 634:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_Enable
 635:board/lib_AT91SAM7S256.h **** //* \brief Enable PIO
 636:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 637:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_Enable(
 638:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 639:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio to be enabled
 640:board/lib_AT91SAM7S256.h **** {
 641:board/lib_AT91SAM7S256.h ****         pPio->PIO_PER = flag;
 642:board/lib_AT91SAM7S256.h **** }
 643:board/lib_AT91SAM7S256.h **** 
 644:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 645:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_Disable
 646:board/lib_AT91SAM7S256.h **** //* \brief Disable PIO
 647:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 648:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_Disable(
 649:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 650:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio to be disabled
 651:board/lib_AT91SAM7S256.h **** {
 652:board/lib_AT91SAM7S256.h ****         pPio->PIO_PDR = flag;
 653:board/lib_AT91SAM7S256.h **** }
 654:board/lib_AT91SAM7S256.h **** 
 655:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 656:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetStatus
 657:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Status
 658:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 659:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetStatus( // \return PIO Status
 660:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 661:board/lib_AT91SAM7S256.h **** {
 662:board/lib_AT91SAM7S256.h ****         return pPio->PIO_PSR;
 663:board/lib_AT91SAM7S256.h **** }
 664:board/lib_AT91SAM7S256.h **** 
 665:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 666:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsSet
 667:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO is Set
 668:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 669:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsSet(
 670:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 671:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 672:board/lib_AT91SAM7S256.h **** {
 673:board/lib_AT91SAM7S256.h ****         return (AT91F_PIO_GetStatus(pPio) & flag);
 674:board/lib_AT91SAM7S256.h **** }
 675:board/lib_AT91SAM7S256.h **** 
 676:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 677:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_OutputEnable
 678:board/lib_AT91SAM7S256.h **** //* \brief Output Enable PIO
 679:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 680:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_OutputEnable(
 681:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 682:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio output to be enabled
 683:board/lib_AT91SAM7S256.h **** {
 684:board/lib_AT91SAM7S256.h ****         pPio->PIO_OER = flag;
 685:board/lib_AT91SAM7S256.h **** }
 686:board/lib_AT91SAM7S256.h **** 
 687:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 688:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_OutputDisable
 689:board/lib_AT91SAM7S256.h **** //* \brief Output Enable PIO
 690:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 691:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_OutputDisable(
 692:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 693:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio output to be disabled
 694:board/lib_AT91SAM7S256.h **** {
 695:board/lib_AT91SAM7S256.h ****         pPio->PIO_ODR = flag;
 696:board/lib_AT91SAM7S256.h **** }
 697:board/lib_AT91SAM7S256.h **** 
 698:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 699:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetOutputStatus
 700:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Output Status
 701:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 702:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetOutputStatus( // \return PIO Output Status
 703:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 704:board/lib_AT91SAM7S256.h **** {
 705:board/lib_AT91SAM7S256.h ****         return pPio->PIO_OSR;
 706:board/lib_AT91SAM7S256.h **** }
 707:board/lib_AT91SAM7S256.h **** 
 708:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 709:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsOuputSet
 710:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO Output is Set
 711:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 712:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsOutputSet(
 713:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 714:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 715:board/lib_AT91SAM7S256.h **** {
 716:board/lib_AT91SAM7S256.h ****         return (AT91F_PIO_GetOutputStatus(pPio) & flag);
 717:board/lib_AT91SAM7S256.h **** }
 718:board/lib_AT91SAM7S256.h **** 
 719:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 720:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_InputFilterEnable
 721:board/lib_AT91SAM7S256.h **** //* \brief Input Filter Enable PIO
 722:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 723:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_InputFilterEnable(
 724:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 725:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio input filter to be enabled
 726:board/lib_AT91SAM7S256.h **** {
 727:board/lib_AT91SAM7S256.h ****         pPio->PIO_IFER = flag;
 728:board/lib_AT91SAM7S256.h **** }
 729:board/lib_AT91SAM7S256.h **** 
 730:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 731:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_InputFilterDisable
 732:board/lib_AT91SAM7S256.h **** //* \brief Input Filter Disable PIO
 733:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 734:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_InputFilterDisable(
 735:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 736:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio input filter to be disabled
 737:board/lib_AT91SAM7S256.h **** {
 738:board/lib_AT91SAM7S256.h ****         pPio->PIO_IFDR = flag;
 739:board/lib_AT91SAM7S256.h **** }
 740:board/lib_AT91SAM7S256.h **** 
 741:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 742:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetInputFilterStatus
 743:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Input Filter Status
 744:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 745:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetInputFilterStatus( // \return PIO Input Filter Status
 746:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 747:board/lib_AT91SAM7S256.h **** {
 748:board/lib_AT91SAM7S256.h ****         return pPio->PIO_IFSR;
 749:board/lib_AT91SAM7S256.h **** }
 750:board/lib_AT91SAM7S256.h **** 
 751:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 752:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsInputFilterSet
 753:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO Input filter is Set
 754:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 755:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsInputFilterSet(
 756:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 757:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 758:board/lib_AT91SAM7S256.h **** {
 759:board/lib_AT91SAM7S256.h ****         return (AT91F_PIO_GetInputFilterStatus(pPio) & flag);
 760:board/lib_AT91SAM7S256.h **** }
 761:board/lib_AT91SAM7S256.h **** 
 762:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 763:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetOutputDataStatus
 764:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Output Data Status
 765:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 766:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetOutputDataStatus( // \return PIO Output Data Status
 767:board/lib_AT91SAM7S256.h **** 	AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 768:board/lib_AT91SAM7S256.h **** {
 769:board/lib_AT91SAM7S256.h ****         return pPio->PIO_ODSR;
 770:board/lib_AT91SAM7S256.h **** }
 771:board/lib_AT91SAM7S256.h **** 
 772:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 773:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_InterruptEnable
 774:board/lib_AT91SAM7S256.h **** //* \brief Enable PIO Interrupt
 775:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 776:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_InterruptEnable(
 777:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 778:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio interrupt to be enabled
 779:board/lib_AT91SAM7S256.h **** {
 780:board/lib_AT91SAM7S256.h ****         pPio->PIO_IER = flag;
 781:board/lib_AT91SAM7S256.h **** }
 782:board/lib_AT91SAM7S256.h **** 
 783:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 784:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_InterruptDisable
 785:board/lib_AT91SAM7S256.h **** //* \brief Disable PIO Interrupt
 786:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 787:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_InterruptDisable(
 788:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 789:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio interrupt to be disabled
 790:board/lib_AT91SAM7S256.h **** {
 791:board/lib_AT91SAM7S256.h ****         pPio->PIO_IDR = flag;
 792:board/lib_AT91SAM7S256.h **** }
 793:board/lib_AT91SAM7S256.h **** 
 794:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 795:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetInterruptMaskStatus
 796:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Interrupt Mask Status
 797:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 798:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetInterruptMaskStatus( // \return PIO Interrupt Mask Status
 799:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 800:board/lib_AT91SAM7S256.h **** {
 801:board/lib_AT91SAM7S256.h ****         return pPio->PIO_IMR;
 802:board/lib_AT91SAM7S256.h **** }
 803:board/lib_AT91SAM7S256.h **** 
 804:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 805:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetInterruptStatus
 806:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Interrupt Status
 807:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 808:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetInterruptStatus( // \return PIO Interrupt Status
 809:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 810:board/lib_AT91SAM7S256.h **** {
 811:board/lib_AT91SAM7S256.h ****         return pPio->PIO_ISR;
 812:board/lib_AT91SAM7S256.h **** }
 813:board/lib_AT91SAM7S256.h **** 
 814:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 815:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsInterruptMasked
 816:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO Interrupt is Masked
 817:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 818:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsInterruptMasked(
 819:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 820:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 821:board/lib_AT91SAM7S256.h **** {
 822:board/lib_AT91SAM7S256.h ****         return (AT91F_PIO_GetInterruptMaskStatus(pPio) & flag);
 823:board/lib_AT91SAM7S256.h **** }
 824:board/lib_AT91SAM7S256.h **** 
 825:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 826:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsInterruptSet
 827:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO Interrupt is Set
 828:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 829:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsInterruptSet(
 830:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 831:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 832:board/lib_AT91SAM7S256.h **** {
 833:board/lib_AT91SAM7S256.h ****         return (AT91F_PIO_GetInterruptStatus(pPio) & flag);
 834:board/lib_AT91SAM7S256.h **** }
 835:board/lib_AT91SAM7S256.h **** 
 836:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 837:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_MultiDriverEnable
 838:board/lib_AT91SAM7S256.h **** //* \brief Multi Driver Enable PIO
 839:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 840:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_MultiDriverEnable(
 841:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 842:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio to be enabled
 843:board/lib_AT91SAM7S256.h **** {
 844:board/lib_AT91SAM7S256.h ****         pPio->PIO_MDER = flag;
 845:board/lib_AT91SAM7S256.h **** }
 846:board/lib_AT91SAM7S256.h **** 
 847:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 848:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_MultiDriverDisable
 849:board/lib_AT91SAM7S256.h **** //* \brief Multi Driver Disable PIO
 850:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 851:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_MultiDriverDisable(
 852:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 853:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio to be disabled
 854:board/lib_AT91SAM7S256.h **** {
 855:board/lib_AT91SAM7S256.h ****         pPio->PIO_MDDR = flag;
 856:board/lib_AT91SAM7S256.h **** }
 857:board/lib_AT91SAM7S256.h **** 
 858:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 859:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetMultiDriverStatus
 860:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Multi Driver Status
 861:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 862:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetMultiDriverStatus( // \return PIO Multi Driver Status
 863:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 864:board/lib_AT91SAM7S256.h **** {
 865:board/lib_AT91SAM7S256.h ****         return pPio->PIO_MDSR;
 866:board/lib_AT91SAM7S256.h **** }
 867:board/lib_AT91SAM7S256.h **** 
 868:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 869:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsMultiDriverSet
 870:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO MultiDriver is Set
 871:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 872:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsMultiDriverSet(
 873:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 874:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 875:board/lib_AT91SAM7S256.h **** {
 876:board/lib_AT91SAM7S256.h ****         return (AT91F_PIO_GetMultiDriverStatus(pPio) & flag);
 877:board/lib_AT91SAM7S256.h **** }
 878:board/lib_AT91SAM7S256.h **** 
 879:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 880:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_A_RegisterSelection
 881:board/lib_AT91SAM7S256.h **** //* \brief PIO A Register Selection
 882:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 883:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_A_RegisterSelection(
 884:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 885:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio A register selection
 886:board/lib_AT91SAM7S256.h **** {
 887:board/lib_AT91SAM7S256.h ****         pPio->PIO_ASR = flag;
 888:board/lib_AT91SAM7S256.h **** }
 889:board/lib_AT91SAM7S256.h **** 
 890:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 891:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_B_RegisterSelection
 892:board/lib_AT91SAM7S256.h **** //* \brief PIO B Register Selection
 893:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 894:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_B_RegisterSelection(
 895:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 896:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio B register selection
 897:board/lib_AT91SAM7S256.h **** {
 898:board/lib_AT91SAM7S256.h ****         pPio->PIO_BSR = flag;
 899:board/lib_AT91SAM7S256.h **** }
 900:board/lib_AT91SAM7S256.h **** 
 901:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 902:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_Get_AB_RegisterStatus
 903:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Interrupt Status
 904:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 905:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_Get_AB_RegisterStatus( // \return PIO AB Register Status
 906:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 907:board/lib_AT91SAM7S256.h **** {
 908:board/lib_AT91SAM7S256.h ****         return pPio->PIO_ABSR;
 909:board/lib_AT91SAM7S256.h **** }
 910:board/lib_AT91SAM7S256.h **** 
 911:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 912:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsAB_RegisterSet
 913:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO AB Register is Set
 914:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 915:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsAB_RegisterSet(
 916:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 917:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 918:board/lib_AT91SAM7S256.h **** {
 919:board/lib_AT91SAM7S256.h ****         return (AT91F_PIO_Get_AB_RegisterStatus(pPio) & flag);
 920:board/lib_AT91SAM7S256.h **** }
 921:board/lib_AT91SAM7S256.h **** 
 922:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 923:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_OutputWriteEnable
 924:board/lib_AT91SAM7S256.h **** //* \brief Output Write Enable PIO
 925:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 926:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_OutputWriteEnable(
 927:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 928:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio output write to be enabled
 929:board/lib_AT91SAM7S256.h **** {
 930:board/lib_AT91SAM7S256.h ****         pPio->PIO_OWER = flag;
 931:board/lib_AT91SAM7S256.h **** }
 932:board/lib_AT91SAM7S256.h **** 
 933:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 934:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_OutputWriteDisable
 935:board/lib_AT91SAM7S256.h **** //* \brief Output Write Disable PIO
 936:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 937:board/lib_AT91SAM7S256.h **** __inline void AT91F_PIO_OutputWriteDisable(
 938:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 939:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  pio output write to be disabled
 940:board/lib_AT91SAM7S256.h **** {
 941:board/lib_AT91SAM7S256.h ****         pPio->PIO_OWDR = flag;
 942:board/lib_AT91SAM7S256.h **** }
 943:board/lib_AT91SAM7S256.h **** 
 944:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 945:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetOutputWriteStatus
 946:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Output Write Status
 947:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 948:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetOutputWriteStatus( // \return PIO Output Write Status
 949:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 950:board/lib_AT91SAM7S256.h **** {
 951:board/lib_AT91SAM7S256.h ****         return pPio->PIO_OWSR;
 952:board/lib_AT91SAM7S256.h **** }
 953:board/lib_AT91SAM7S256.h **** 
 954:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 955:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsOutputWriteSet
 956:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO OutputWrite is Set
 957:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 958:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsOutputWriteSet(
 959:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 960:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 961:board/lib_AT91SAM7S256.h **** {
 962:board/lib_AT91SAM7S256.h ****         return (AT91F_PIO_GetOutputWriteStatus(pPio) & flag);
 963:board/lib_AT91SAM7S256.h **** }
 964:board/lib_AT91SAM7S256.h **** 
 965:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 966:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_GetCfgPullup
 967:board/lib_AT91SAM7S256.h **** //* \brief Return PIO Configuration Pullup
 968:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 969:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PIO_GetCfgPullup( // \return PIO Configuration Pullup
 970:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 971:board/lib_AT91SAM7S256.h **** {
 972:board/lib_AT91SAM7S256.h ****         return pPio->PIO_PPUSR;
 973:board/lib_AT91SAM7S256.h **** }
 974:board/lib_AT91SAM7S256.h **** 
 975:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 976:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsOutputDataStatusSet
 977:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO Output Data Status is Set
 978:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 979:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsOutputDataStatusSet(
 980:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 981:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 982:board/lib_AT91SAM7S256.h **** {
 983:board/lib_AT91SAM7S256.h ****         return (AT91F_PIO_GetOutputDataStatus(pPio) & flag);
 984:board/lib_AT91SAM7S256.h **** }
 985:board/lib_AT91SAM7S256.h **** 
 986:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 987:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PIO_IsCfgPullupStatusSet
 988:board/lib_AT91SAM7S256.h **** //* \brief Test if PIO Configuration Pullup Status is Set
 989:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
 990:board/lib_AT91SAM7S256.h **** __inline int AT91F_PIO_IsCfgPullupStatusSet(
 991:board/lib_AT91SAM7S256.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 992:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
 993:board/lib_AT91SAM7S256.h **** {
 994:board/lib_AT91SAM7S256.h ****         return (~AT91F_PIO_GetCfgPullup(pPio) & flag);
 995:board/lib_AT91SAM7S256.h **** }
 996:board/lib_AT91SAM7S256.h **** 
 997:board/lib_AT91SAM7S256.h **** /* *****************************************************************************
 998:board/lib_AT91SAM7S256.h ****                 SOFTWARE API FOR PMC
 999:board/lib_AT91SAM7S256.h ****    ***************************************************************************** */
1000:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1001:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_CfgSysClkEnableReg
1002:board/lib_AT91SAM7S256.h **** //* \brief Configure the System Clock Enable Register of the PMC controller
1003:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1004:board/lib_AT91SAM7S256.h **** __inline void AT91F_PMC_CfgSysClkEnableReg (
1005:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1006:board/lib_AT91SAM7S256.h **** 	unsigned int mode)
1007:board/lib_AT91SAM7S256.h **** {
1008:board/lib_AT91SAM7S256.h **** 	//* Write to the SCER register
1009:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_SCER = mode;
1010:board/lib_AT91SAM7S256.h **** }
1011:board/lib_AT91SAM7S256.h **** 
1012:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1013:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_CfgSysClkDisableReg
1014:board/lib_AT91SAM7S256.h **** //* \brief Configure the System Clock Disable Register of the PMC controller
1015:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1016:board/lib_AT91SAM7S256.h **** __inline void AT91F_PMC_CfgSysClkDisableReg (
1017:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1018:board/lib_AT91SAM7S256.h **** 	unsigned int mode)
1019:board/lib_AT91SAM7S256.h **** {
1020:board/lib_AT91SAM7S256.h **** 	//* Write to the SCDR register
1021:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_SCDR = mode;
1022:board/lib_AT91SAM7S256.h **** }
1023:board/lib_AT91SAM7S256.h **** 
1024:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1025:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_GetSysClkStatusReg
1026:board/lib_AT91SAM7S256.h **** //* \brief Return the System Clock Status Register of the PMC controller
1027:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1028:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PMC_GetSysClkStatusReg (
1029:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC // pointer to a CAN controller
1030:board/lib_AT91SAM7S256.h **** 	)
1031:board/lib_AT91SAM7S256.h **** {
1032:board/lib_AT91SAM7S256.h **** 	return pPMC->PMC_SCSR;
1033:board/lib_AT91SAM7S256.h **** }
1034:board/lib_AT91SAM7S256.h **** 
1035:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1036:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_EnablePeriphClock
1037:board/lib_AT91SAM7S256.h **** //* \brief Enable peripheral clock
1038:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1039:board/lib_AT91SAM7S256.h **** __inline void AT91F_PMC_EnablePeriphClock (
1040:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1041:board/lib_AT91SAM7S256.h **** 	unsigned int periphIds)  // \arg IDs of peripherals to enable
1042:board/lib_AT91SAM7S256.h **** {
1043:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_PCER = periphIds;
  43              		.loc 2 1043 0
  44 0014 0420A0E3 		mov	r2, #4
  45 0018 EF2303E5 		str	r2, [r3, #-1007]
  46              	.LVL2:
  47              	.LBE7:
  48              	.LBE6:
  49              	.LBB8:
  50              	.LBB9:
1044:board/lib_AT91SAM7S256.h **** }
1045:board/lib_AT91SAM7S256.h **** 
1046:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1047:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_DisablePeriphClock
1048:board/lib_AT91SAM7S256.h **** //* \brief Disable peripheral clock
1049:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1050:board/lib_AT91SAM7S256.h **** __inline void AT91F_PMC_DisablePeriphClock (
1051:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1052:board/lib_AT91SAM7S256.h **** 	unsigned int periphIds)  // \arg IDs of peripherals to enable
1053:board/lib_AT91SAM7S256.h **** {
1054:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_PCDR = periphIds;
1055:board/lib_AT91SAM7S256.h **** }
1056:board/lib_AT91SAM7S256.h **** 
1057:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1058:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_GetPeriphClock
1059:board/lib_AT91SAM7S256.h **** //* \brief Get peripheral clock status
1060:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1061:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PMC_GetPeriphClock (
1062:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC) // \arg pointer to PMC controller
1063:board/lib_AT91SAM7S256.h **** {
1064:board/lib_AT91SAM7S256.h **** 	return pPMC->PMC_PCSR;
1065:board/lib_AT91SAM7S256.h **** }
1066:board/lib_AT91SAM7S256.h **** 
1067:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1068:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_CKGR_CfgMainOscillatorReg
1069:board/lib_AT91SAM7S256.h **** //* \brief Cfg the main oscillator
1070:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1071:board/lib_AT91SAM7S256.h **** __inline void AT91F_CKGR_CfgMainOscillatorReg (
1072:board/lib_AT91SAM7S256.h **** 	AT91PS_CKGR pCKGR, // \arg pointer to CKGR controller
1073:board/lib_AT91SAM7S256.h **** 	unsigned int mode)
1074:board/lib_AT91SAM7S256.h **** {
1075:board/lib_AT91SAM7S256.h **** 	pCKGR->CKGR_MOR = mode;
1076:board/lib_AT91SAM7S256.h **** }
1077:board/lib_AT91SAM7S256.h **** 
1078:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1079:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_CKGR_GetMainOscillatorReg
1080:board/lib_AT91SAM7S256.h **** //* \brief Cfg the main oscillator
1081:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1082:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_CKGR_GetMainOscillatorReg (
1083:board/lib_AT91SAM7S256.h **** 	AT91PS_CKGR pCKGR) // \arg pointer to CKGR controller
1084:board/lib_AT91SAM7S256.h **** {
1085:board/lib_AT91SAM7S256.h **** 	return pCKGR->CKGR_MOR;
1086:board/lib_AT91SAM7S256.h **** }
1087:board/lib_AT91SAM7S256.h **** 
1088:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1089:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_CKGR_EnableMainOscillator
1090:board/lib_AT91SAM7S256.h **** //* \brief Enable the main oscillator
1091:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1092:board/lib_AT91SAM7S256.h **** __inline void AT91F_CKGR_EnableMainOscillator(
1093:board/lib_AT91SAM7S256.h **** 	AT91PS_CKGR pCKGR) // \arg pointer to CKGR controller
1094:board/lib_AT91SAM7S256.h **** {
1095:board/lib_AT91SAM7S256.h **** 	pCKGR->CKGR_MOR |= AT91C_CKGR_MOSCEN;
1096:board/lib_AT91SAM7S256.h **** }
1097:board/lib_AT91SAM7S256.h **** 
1098:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1099:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_CKGR_DisableMainOscillator
1100:board/lib_AT91SAM7S256.h **** //* \brief Disable the main oscillator
1101:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1102:board/lib_AT91SAM7S256.h **** __inline void AT91F_CKGR_DisableMainOscillator (
1103:board/lib_AT91SAM7S256.h **** 	AT91PS_CKGR pCKGR) // \arg pointer to CKGR controller
1104:board/lib_AT91SAM7S256.h **** {
1105:board/lib_AT91SAM7S256.h **** 	pCKGR->CKGR_MOR &= ~AT91C_CKGR_MOSCEN;
1106:board/lib_AT91SAM7S256.h **** }
1107:board/lib_AT91SAM7S256.h **** 
1108:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1109:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_CKGR_CfgMainOscStartUpTime
1110:board/lib_AT91SAM7S256.h **** //* \brief Cfg MOR Register according to the main osc startup time
1111:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1112:board/lib_AT91SAM7S256.h **** __inline void AT91F_CKGR_CfgMainOscStartUpTime (
1113:board/lib_AT91SAM7S256.h **** 	AT91PS_CKGR pCKGR, // \arg pointer to CKGR controller
1114:board/lib_AT91SAM7S256.h **** 	unsigned int startup_time,  // \arg main osc startup time in microsecond (us)
1115:board/lib_AT91SAM7S256.h **** 	unsigned int slowClock)  // \arg slowClock in Hz
1116:board/lib_AT91SAM7S256.h **** {
1117:board/lib_AT91SAM7S256.h **** 	pCKGR->CKGR_MOR &= ~AT91C_CKGR_OSCOUNT;
1118:board/lib_AT91SAM7S256.h **** 	pCKGR->CKGR_MOR |= ((slowClock * startup_time)/(8*1000000)) << 8;
1119:board/lib_AT91SAM7S256.h **** }
1120:board/lib_AT91SAM7S256.h **** 
1121:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1122:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_CKGR_GetMainClockFreqReg
1123:board/lib_AT91SAM7S256.h **** //* \brief Cfg the main oscillator
1124:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1125:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_CKGR_GetMainClockFreqReg (
1126:board/lib_AT91SAM7S256.h **** 	AT91PS_CKGR pCKGR) // \arg pointer to CKGR controller
1127:board/lib_AT91SAM7S256.h **** {
1128:board/lib_AT91SAM7S256.h **** 	return pCKGR->CKGR_MCFR;
1129:board/lib_AT91SAM7S256.h **** }
1130:board/lib_AT91SAM7S256.h **** 
1131:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1132:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_CKGR_GetMainClock
1133:board/lib_AT91SAM7S256.h **** //* \brief Return Main clock in Hz
1134:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1135:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_CKGR_GetMainClock (
1136:board/lib_AT91SAM7S256.h **** 	AT91PS_CKGR pCKGR, // \arg pointer to CKGR controller
1137:board/lib_AT91SAM7S256.h **** 	unsigned int slowClock)  // \arg slowClock in Hz
1138:board/lib_AT91SAM7S256.h **** {
1139:board/lib_AT91SAM7S256.h **** 	return ((pCKGR->CKGR_MCFR  & AT91C_CKGR_MAINF) * slowClock) >> 4;
1140:board/lib_AT91SAM7S256.h **** }
1141:board/lib_AT91SAM7S256.h **** 
1142:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1143:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_CfgMCKReg
1144:board/lib_AT91SAM7S256.h **** //* \brief Cfg Master Clock Register
1145:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1146:board/lib_AT91SAM7S256.h **** __inline void AT91F_PMC_CfgMCKReg (
1147:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1148:board/lib_AT91SAM7S256.h **** 	unsigned int mode)
1149:board/lib_AT91SAM7S256.h **** {
1150:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_MCKR = mode;
1151:board/lib_AT91SAM7S256.h **** }
1152:board/lib_AT91SAM7S256.h **** 
1153:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1154:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_GetMCKReg
1155:board/lib_AT91SAM7S256.h **** //* \brief Return Master Clock Register
1156:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1157:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PMC_GetMCKReg(
1158:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC) // \arg pointer to PMC controller
1159:board/lib_AT91SAM7S256.h **** {
1160:board/lib_AT91SAM7S256.h **** 	return pPMC->PMC_MCKR;
1161:board/lib_AT91SAM7S256.h **** }
1162:board/lib_AT91SAM7S256.h **** 
1163:board/lib_AT91SAM7S256.h **** //*------------------------------------------------------------------------------
1164:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_GetMasterClock
1165:board/lib_AT91SAM7S256.h **** //* \brief Return master clock in Hz which correponds to processor clock for ARM7
1166:board/lib_AT91SAM7S256.h **** //*------------------------------------------------------------------------------
1167:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PMC_GetMasterClock (
1168:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1169:board/lib_AT91SAM7S256.h **** 	AT91PS_CKGR pCKGR, // \arg pointer to CKGR controller
1170:board/lib_AT91SAM7S256.h **** 	unsigned int slowClock)  // \arg slowClock in Hz
1171:board/lib_AT91SAM7S256.h **** {
1172:board/lib_AT91SAM7S256.h **** 	unsigned int reg = pPMC->PMC_MCKR;
1173:board/lib_AT91SAM7S256.h **** 	unsigned int prescaler = (1 << ((reg & AT91C_PMC_PRES) >> 2));
1174:board/lib_AT91SAM7S256.h **** 	unsigned int pllDivider, pllMultiplier;
1175:board/lib_AT91SAM7S256.h **** 
1176:board/lib_AT91SAM7S256.h **** 	switch (reg & AT91C_PMC_CSS) {
1177:board/lib_AT91SAM7S256.h **** 		case AT91C_PMC_CSS_SLOW_CLK: // Slow clock selected
1178:board/lib_AT91SAM7S256.h **** 			return slowClock / prescaler;
1179:board/lib_AT91SAM7S256.h **** 		case AT91C_PMC_CSS_MAIN_CLK: // Main clock is selected
1180:board/lib_AT91SAM7S256.h **** 			return AT91F_CKGR_GetMainClock(pCKGR, slowClock) / prescaler;
1181:board/lib_AT91SAM7S256.h **** 		case AT91C_PMC_CSS_PLL_CLK: // PLLB clock is selected
1182:board/lib_AT91SAM7S256.h **** 			reg = pCKGR->CKGR_PLLR;
1183:board/lib_AT91SAM7S256.h **** 			pllDivider    = (reg  & AT91C_CKGR_DIV);
1184:board/lib_AT91SAM7S256.h **** 			pllMultiplier = ((reg  & AT91C_CKGR_MUL) >> 16) + 1;
1185:board/lib_AT91SAM7S256.h **** 			return AT91F_CKGR_GetMainClock(pCKGR, slowClock) / pllDivider * pllMultiplier / prescaler;
1186:board/lib_AT91SAM7S256.h **** 	}
1187:board/lib_AT91SAM7S256.h **** 	return 0;
1188:board/lib_AT91SAM7S256.h **** }
1189:board/lib_AT91SAM7S256.h **** 
1190:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1191:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_EnablePCK
1192:board/lib_AT91SAM7S256.h **** //* \brief Enable peripheral clock
1193:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1194:board/lib_AT91SAM7S256.h **** __inline void AT91F_PMC_EnablePCK (
1195:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1196:board/lib_AT91SAM7S256.h **** 	unsigned int pck,  // \arg Peripheral clock identifier 0 .. 7
1197:board/lib_AT91SAM7S256.h **** 	unsigned int mode)
1198:board/lib_AT91SAM7S256.h **** {
1199:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_PCKR[pck] = mode;
1200:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_SCER = (1 << pck) << 8;
1201:board/lib_AT91SAM7S256.h **** }
1202:board/lib_AT91SAM7S256.h **** 
1203:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1204:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_DisablePCK
1205:board/lib_AT91SAM7S256.h **** //* \brief Enable peripheral clock
1206:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1207:board/lib_AT91SAM7S256.h **** __inline void AT91F_PMC_DisablePCK (
1208:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1209:board/lib_AT91SAM7S256.h **** 	unsigned int pck)  // \arg Peripheral clock identifier 0 .. 7
1210:board/lib_AT91SAM7S256.h **** {
1211:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_SCDR = (1 << pck) << 8;
1212:board/lib_AT91SAM7S256.h **** }
1213:board/lib_AT91SAM7S256.h **** 
1214:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1215:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_EnableIt
1216:board/lib_AT91SAM7S256.h **** //* \brief Enable PMC interrupt
1217:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1218:board/lib_AT91SAM7S256.h **** __inline void AT91F_PMC_EnableIt (
1219:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC,     // pointer to a PMC controller
1220:board/lib_AT91SAM7S256.h **** 	unsigned int flag)   // IT to be enabled
1221:board/lib_AT91SAM7S256.h **** {
1222:board/lib_AT91SAM7S256.h **** 	//* Write to the IER register
1223:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_IER = flag;
1224:board/lib_AT91SAM7S256.h **** }
1225:board/lib_AT91SAM7S256.h **** 
1226:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1227:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_DisableIt
1228:board/lib_AT91SAM7S256.h **** //* \brief Disable PMC interrupt
1229:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1230:board/lib_AT91SAM7S256.h **** __inline void AT91F_PMC_DisableIt (
1231:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC, // pointer to a PMC controller
1232:board/lib_AT91SAM7S256.h **** 	unsigned int flag) // IT to be disabled
1233:board/lib_AT91SAM7S256.h **** {
1234:board/lib_AT91SAM7S256.h **** 	//* Write to the IDR register
1235:board/lib_AT91SAM7S256.h **** 	pPMC->PMC_IDR = flag;
1236:board/lib_AT91SAM7S256.h **** }
1237:board/lib_AT91SAM7S256.h **** 
1238:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1239:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_GetStatus
1240:board/lib_AT91SAM7S256.h **** //* \brief Return PMC Interrupt Status
1241:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1242:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PMC_GetStatus( // \return PMC Interrupt Status
1243:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC) // pointer to a PMC controller
1244:board/lib_AT91SAM7S256.h **** {
1245:board/lib_AT91SAM7S256.h **** 	return pPMC->PMC_SR;
1246:board/lib_AT91SAM7S256.h **** }
1247:board/lib_AT91SAM7S256.h **** 
1248:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1249:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_GetInterruptMaskStatus
1250:board/lib_AT91SAM7S256.h **** //* \brief Return PMC Interrupt Mask Status
1251:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1252:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PMC_GetInterruptMaskStatus( // \return PMC Interrupt Mask Status
1253:board/lib_AT91SAM7S256.h **** 	AT91PS_PMC pPMC) // pointer to a PMC controller
1254:board/lib_AT91SAM7S256.h **** {
1255:board/lib_AT91SAM7S256.h **** 	return pPMC->PMC_IMR;
1256:board/lib_AT91SAM7S256.h **** }
1257:board/lib_AT91SAM7S256.h **** 
1258:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1259:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_IsInterruptMasked
1260:board/lib_AT91SAM7S256.h **** //* \brief Test if PMC Interrupt is Masked
1261:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1262:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PMC_IsInterruptMasked(
1263:board/lib_AT91SAM7S256.h ****         AT91PS_PMC pPMC,   // \arg  pointer to a PMC controller
1264:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
1265:board/lib_AT91SAM7S256.h **** {
1266:board/lib_AT91SAM7S256.h **** 	return (AT91F_PMC_GetInterruptMaskStatus(pPMC) & flag);
1267:board/lib_AT91SAM7S256.h **** }
1268:board/lib_AT91SAM7S256.h **** 
1269:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1270:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_PMC_IsStatusSet
1271:board/lib_AT91SAM7S256.h **** //* \brief Test if PMC Status is Set
1272:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1273:board/lib_AT91SAM7S256.h **** __inline unsigned int AT91F_PMC_IsStatusSet(
1274:board/lib_AT91SAM7S256.h ****         AT91PS_PMC pPMC,   // \arg  pointer to a PMC controller
1275:board/lib_AT91SAM7S256.h ****         unsigned int flag) // \arg  flag to be tested
1276:board/lib_AT91SAM7S256.h **** {
1277:board/lib_AT91SAM7S256.h **** 	return (AT91F_PMC_GetStatus(pPMC) & flag);
1278:board/lib_AT91SAM7S256.h **** }/* *****************************************************************************
1279:board/lib_AT91SAM7S256.h ****                 SOFTWARE API FOR RSTC
1280:board/lib_AT91SAM7S256.h ****    ***************************************************************************** */
1281:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1282:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_RSTSoftReset
1283:board/lib_AT91SAM7S256.h **** //* \brief Start Software Reset
1284:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1285:board/lib_AT91SAM7S256.h **** __inline void AT91F_RSTSoftReset(
1286:board/lib_AT91SAM7S256.h ****         AT91PS_RSTC pRSTC,
1287:board/lib_AT91SAM7S256.h ****         unsigned int reset)
1288:board/lib_AT91SAM7S256.h **** {
1289:board/lib_AT91SAM7S256.h **** 	pRSTC->RSTC_RCR = (0xA5000000 | reset);
1290:board/lib_AT91SAM7S256.h **** }
1291:board/lib_AT91SAM7S256.h **** 
1292:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1293:board/lib_AT91SAM7S256.h **** //* \fn    AT91F_RSTSetMode
1294:board/lib_AT91SAM7S256.h **** //* \brief Set Reset Mode
1295:board/lib_AT91SAM7S256.h **** //*----------------------------------------------------------------------------
1296:board/lib_AT91SAM7S256.h **** __inline void AT91F_RSTSetMode(
1297:board/lib_AT91SAM7S256.h ****         AT91PS_RSTC pRSTC,
1298:board/lib_AT91SAM7S256.h ****         unsigned int mode)
1299:board/lib_AT91SAM7S256.h **** {
1300:board/lib_AT91SAM7S256.h **** 	pRSTC->RSTC_RMR = (0xA5000000 | mode);
  51              		.loc 2 1300 0
  52 001c 24209FE5 		ldr	r2, .L4+4
  53              		.cfi_offset 11, -16
  54              		.cfi_offset 13, -12
  55              		.cfi_offset 14, -8
  56              	.LBE9:
  57              	.LBE8:
   7:main.c        **** int main(void) {
  58              		.loc 1 7 0
  59 0020 04B04CE2 		sub	fp, ip, #4
  60              	.LCFI1:
  61              		.cfi_def_cfa 11, 4
  18:main.c        **** 	// First, enable the clock of the PIOB
  19:main.c        **** 	AT91F_PMC_EnablePeriphClock ( AT91C_BASE_PMC, 1 << AT91C_ID_PIOA ) ;
  20:main.c        **** 	// mt: added reset enable to make the board reset-button "useful"
  21:main.c        **** 	AT91F_RSTSetMode( AT91C_BASE_RSTC , AT91C_RSTC_URSTEN );
  22:main.c        **** 
  23:main.c        **** //	USART0Setup();
  24:main.c        **** //	USART_puts("Device init\n");
  25:main.c        **** 		delay_ms(1000);
  62              		.loc 1 25 0
  63 0024 FA0FA0E3 		mov	r0, #1000
  64              	.LBB11:
  65              	.LBB10:
  66              		.loc 2 1300 0
  67 0028 F72203E5 		str	r2, [r3, #-759]
  68              	.LBE10:
  69              	.LBE11:
  70              		.loc 1 25 0
  71 002c FEFFFFEB 		bl	delay_ms
  72              	.LVL3:
  26:main.c        **** 	sid_init();
  73              		.loc 1 26 0
  74 0030 FEFFFFEB 		bl	sid_init
  75              	.LVL4:
  76              	.L2:
  27:main.c        **** 
  28:main.c        **** 	while(1){
  29:main.c        **** 		delay_ms(3000);
  77              		.loc 1 29 0 discriminator 1
  78 0034 10009FE5 		ldr	r0, .L4+8
  79 0038 FEFFFFEB 		bl	delay_ms
  80              	.LVL5:
  30:main.c        **** 		sid_michael();
  81              		.loc 1 30 0 discriminator 1
  82 003c FEFFFFEB 		bl	sid_michael
  83              	.LVL6:
  84 0040 FBFFFFEA 		b	.L2
  85              	.L5:
  86              		.align	2
  87              	.L4:
  88 0044 010400A5 		.word	-1526725631
  89 0048 010000A5 		.word	-1526726655
  90 004c B80B0000 		.word	3000
  91              		.cfi_endproc
  92              	.LFE283:
  94              		.text
  95              	.Letext0:
  96              		.file 3 "board/AT91SAM7S256.h"
  97              		.file 4 "board/board.h"
  98              		.file 5 "sid.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccVRNiQ2.s:17     .text.startup:0000000000000000 $a
     /tmp/ccVRNiQ2.s:20     .text.startup:0000000000000000 main
     /tmp/ccVRNiQ2.s:88     .text.startup:0000000000000044 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
delay_ms
sid_init
sid_michael
